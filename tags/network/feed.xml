<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Network on vUptime.io - Cloud builder(s)</title><link>https://vuptime.io/tags/network/</link><description>Recent content in Network on vUptime.io - Cloud builder(s)</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Ludovic Rivallain and blog co-authors</copyright><lastBuildDate>Wed, 26 Mar 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://vuptime.io/tags/network/feed.xml" rel="self" type="application/rss+xml"/><item><title>How to keep your IP addresses while migrating to Azure VMware Solution</title><link>https://vuptime.io/post/2025-03-26-keep-ip-addresses-while-migrating-to-avs/</link><pubDate>Wed, 26 Mar 2025 00:00:00 +0000</pubDate><guid>https://vuptime.io/post/2025-03-26-keep-ip-addresses-while-migrating-to-avs/</guid><description>
&lt;div style="float: left; margin-right: 20px;">
&lt;img src="https://vuptime.io/images/thumbs/keep-ip.png" width="500" height="500" style="border-radius: 10px; border: 2px solid #ccc;">
&lt;/div>
Migrating On Premises assets to a cloud solution can be a complex process, especially when it comes to considering existing IP addresses plan. One key benefit of migrating to Azure VMware Solution (AVS) is the ability to keep existing IP addresses, which can simplify the migration process and reduce downtime. However, this approach requires careful planning and consideration of network principles to ensure a smooth transition.
&lt;p>This post will explore some considerations for keeping IP addresses during the migration to AVS, including the importance of understanding network dependencies and the potential impact on performance. It will also discuss the benefits of leveraging VMware Hybrid Cloud Extension (HCX) Layer 2 extensions to facilitate the migration process.&lt;/p>
&lt;h2 id="general-considerations">General Considerations&lt;/h2>
&lt;p>First and foremost, we need to align ourselves on some fundamental network principles before exploring solutions. These principles are crucial to understand when planning a migration to Azure VMware Solution (AVS) and maintaining existing IP addresses, as we cannot re-invent networking principles to suit our IP journey expectations.&lt;/p>
&lt;h3 id="a-single-routed-network-can-only-be-accessible-from-one-location">A single routed network can only be accessible from one location&lt;/h3>
&lt;p>It seems obvious, but it is important to understand that a routed network can only be accessible from one location at a time. This means that if you have a routed network in your on-premises environment (like 10.1.2.0/24 for example), a network with the same IP address range cannot be published from the cloud side at the same time. This is a fundamental principle of networking and must be taken into account when planning your migration.&lt;/p>
&lt;p>&lt;figure>
&lt;picture>
&lt;img
loading="lazy"
decoding="async"
alt="A single routed network can only be accessible from one location"
class="image_figure image_internal image_unprocessed"
src="https://vuptime.io/images/avs-keep-ip/a-single-routed-network-can-only-be-accessible-from-one-location.png"
/>
&lt;/picture>
&lt;/figure>
&lt;/p>
&lt;h3 id="assets-in-a-single-vlan-share-the-same-broadcast-domain">Assets in a single vLAN share the same broadcast domain&lt;/h3>
&lt;p>When assets are in the same VLAN, they share the same broadcast domain. This means that they can communicate with each other without the need for a router. This will also applied on assets in an extended L2 network.&lt;/p>
&lt;p>Example of ARP broadcast over an extended L2 network:&lt;/p>
&lt;p>&lt;figure>
&lt;picture>
&lt;img
loading="lazy"
decoding="async"
alt="Assets in a single vLAN share the same broadcast domain"
class="image_figure image_internal image_unprocessed"
src="https://vuptime.io/images/avs-keep-ip/assets-in-a-single-vlan-subnet-share-the-same-broadcast-domain.png"
/>
&lt;/picture>
&lt;/figure>
&lt;/p>
&lt;h3 id="migrated-asset-will-still-continue-to-use-its-configured-gateway-to-reach-routed-peers">Migrated asset will still continue to use its configured gateway to reach routed peers&lt;/h3>
&lt;p>When you migrate an asset to the cloud and retain its IP address, it will continue to use its configured gateway to reach routed peers. This means that if you have a routed network in your on-premises environment, the migrated asset will still use its on-premises gateway to communicate with other assets in the same network. Typically, this connectivity path will be utilized for both egress and ingress traffic.&lt;/p>
&lt;p>&lt;figure>
&lt;picture>
&lt;img
loading="lazy"
decoding="async"
alt="If keeping IP address: migrated asset will still continue to use its configured gateway to reach routed peers"
class="image_figure image_internal image_unprocessed"
src="https://vuptime.io/images/avs-keep-ip/migrated-asset-will-still-continue-to-use-its-configured-gateway-to-reach-routed-peers.png"
/>
&lt;/picture>
&lt;/figure>
&lt;/p>
&lt;h3 id="latency-will-exist-between-migrated-and-non-migrated-assets">Latency will exist between migrated and non-migrated assets&lt;/h3>
&lt;p>When you migrate an asset to the cloud and retain its IP address, latency will exist between migrated and non-migrated assets. In addition to the familiar on-premises connectivity, several other factors will contribute to latency:&lt;/p>
&lt;ul>
&lt;li>Geographical distance between the two locations&lt;/li>
&lt;li>Link quality and routing hops&lt;/li>
&lt;li>Link usage and congestion&lt;/li>
&lt;li>Tunneling techniques and protocols used&lt;/li>
&lt;li>Possible tromboning of traffic&lt;/li>
&lt;/ul>
&lt;p>&lt;figure>
&lt;picture>
&lt;img
loading="lazy"
decoding="async"
alt="Latency will exist between migrated and non-migrated assets"
class="image_figure image_internal image_unprocessed"
src="https://vuptime.io/images/avs-keep-ip/latency-will-exist-between-migrated-and-non-migrated-assets.png"
/>
&lt;/picture>
&lt;/figure>
&lt;/p>
&lt;p>Traffic latency can also affect cloud to cloud communication in case of extended L2 networks: this is the tromboning effect.&lt;/p>
&lt;h4 id="what-is-traffic-tromboning">What is traffic tromboning?&lt;/h4>
&lt;p>Traffic tromboning occurs when traffic is sent from one location to another and then back again, rather than taking a direct path.&lt;/p>
&lt;p>&lt;strong>Example:&lt;/strong> One of the worst scenarios is when a migrated asset in the cloud tries to communicate with another asset in a different network. If the gateway of one asset is on-premises, the traffic will travel from the migrated asset (cloud side) to the on-premises gateway, and then back to the cloud side to reach the destination asset. The response will follow the same path: from the destination asset (cloud side) to the on-premises gateway, and finally back to the migrated asset.&lt;/p>
&lt;p>This pattern can strongly affect performance and perceived latency.&lt;/p>
&lt;p>&lt;figure>
&lt;picture>
&lt;img
loading="lazy"
decoding="async"
alt="What is traffic tromboning?"
class="image_figure image_internal image_unprocessed"
src="https://vuptime.io/images/avs-keep-ip/traffic-tromboning.png"
/>
&lt;/picture>
&lt;/figure>
&lt;/p>
&lt;h2 id="extend-network-to-keep-ip-addresses">Extend network to keep IP addresses&lt;/h2>
&lt;p>As you may already have guessed, the solution to keep IP addresses while migrating to a cloud solution, is to extend the network(s) and to consider migration &amp;quot;per network&amp;quot; instead of per VM/application or other kind of asset.&lt;/p>
&lt;p>In order to do things properly, I will recommend the following approach:&lt;/p>
&lt;h3 id="execution-plan">Execution Plan&lt;/h3>
&lt;ol>
&lt;li>&lt;strong>Plan, plan, plan!&lt;/strong>
&lt;ul>
&lt;li>Carefully select network(s) to extend.&lt;/li>
&lt;li>Understand the next phases and the way to execute them with the network to extend.&lt;/li>
&lt;li>Understand all the dependencies of the network.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Extend L2 Network&lt;/strong>
&lt;ul>
&lt;li>Network will now be able to host assets in two locations.&lt;/li>
&lt;li>The gateway will remain on-premises (for most assets).&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Migrate Assets&lt;/strong>
&lt;ul>
&lt;li>Migrated assets will keep connectivity and IP addresses.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Evacuate Remaining Assets&lt;/strong>
&lt;ul>
&lt;li>If needed: some assets may require reIP to ensure the network is free from resources on-premises.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Switchover Connectivity&lt;/strong>
&lt;ul>
&lt;li>Connectivity is now switched to the cloud side.&lt;/li>
&lt;li>All workloads will use native connectivity.&lt;/li>
&lt;li>L2 Extension is removed.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>Regarding the migration project, each step of the execution plan has its own criticality level, which can be summarized as follows:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Phase&lt;/th>
&lt;th>Criticality&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Plan&lt;/td>
&lt;td>&lt;span style="color: #ff5733;">Critical&lt;/span>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Extend L2 Network&lt;/td>
&lt;td>&lt;span style="color: #33e0ff;">Low&lt;/span>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Migrate Assets&lt;/td>
&lt;td>&lt;span style="color: #ff9f33;">Medium&lt;/span>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Evacuate Remaining Assets&lt;/td>
&lt;td>&lt;span style="color: #33e0ff;">Low&lt;/span>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Switchover Connectivity&lt;/td>
&lt;td>&lt;span style="color: #ff5733;">Critical&lt;/span>*&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>* &lt;em>Depends a lot on the planning phase.&lt;/em>&lt;/p>
&lt;h3 id="how-does-it-work">How does it work?&lt;/h3>
&lt;p>Here is a simplified diagram of how the network extension works:&lt;/p>
&lt;p>&lt;figure>
&lt;picture>
&lt;img
loading="lazy"
decoding="async"
alt="How does it work?"
class="image_figure image_internal image_unprocessed"
src="https://vuptime.io/images/avs-keep-ip/how-does-it-work.png"
/>
&lt;/picture>
&lt;/figure>
&lt;/p>
&lt;p>After carreful planning:&lt;/p>
&lt;ol>
&lt;li>The network extension is implemented using extension technology (examples will be provided later).&lt;/li>
&lt;li>Assets from this network are either migrated (retaining their IP addresses) or evacuated from the network (Re-IP, decommission, etc.).&lt;/li>
&lt;li>The network extension is removed, and connectivity is switched to the cloud side.&lt;/li>
&lt;/ol>
&lt;h3 id="how-is-my-network-currently-built">How is my network currently built?&lt;/h3>
&lt;p>While planning the migration, it is important to understand how your network is currently built and what are your ambitions for the migration project. This will help you identify potential issues and plan for a successful migration.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;span style="color:rgb(75, 194, 81);">Best Case Scenario&lt;/span>&lt;/th>
&lt;th>&lt;span style="color: #ff5733;">Worst Case Scenario&lt;/span>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Small Layer 2 (L2) subnets with only VMware assets.&lt;/td>
&lt;td>A flat network topology.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>All assets will migrate to the cloud.&lt;/td>
&lt;td>Not all resources will switch to the cloud&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>A good understanding of network dependencies between networks and assets.&lt;/td>
&lt;td>Limited knowledge of network dependencies.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>No dependencies with on-premises after migration.&lt;/td>
&lt;td>Lots of dependencies with on-premises after migration.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;div class="notices info">
&lt;div class="label">Note&lt;/div>
&lt;p>If we can easily determine best and worst case scenarios criteria, &lt;strong>all shades can exist&lt;/strong> between these two extreme scenarios.&lt;/p>
&lt;/div>
&lt;h2 id="risks-mitigation">Risks mitigation&lt;/h2>
&lt;p>In the following section, we will oversee some possible mitigation strategies for the previous risks.&lt;/p>
&lt;h3 id="networks-with-vmware-and-non-vmware-assets">Networks with VMware and non-VMware assets&lt;/h3>
&lt;ul>
&lt;li>Per network: consider the level of effort to re-IP one or the other category. Example:
&lt;ul>
&lt;li>&lt;em>80% of my assets will remain on-premises: change IP addresses for the 20% migrated?&lt;/em>&lt;/li>
&lt;li>&lt;em>80% of my assets will migrate to the cloud: change IP addresses for the 20% remaining on-premises?&lt;/em>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>L2 extension can still help to migrate resources, even if considering a re-IP strategy for the migrated workload.&lt;/li>
&lt;/ul>
&lt;h3 id="dependencies-with-on-premises-after-migration">Dependencies with on-premises after migration&lt;/h3>
&lt;ul>
&lt;li>Consider a cloud migration of services hosted on-premises: PaaS/IaaS etc.&lt;/li>
&lt;li>Adapt connectivity methods between environments: more bandwidth, less latency, etc.&lt;/li>
&lt;/ul>
&lt;h3 id="limited-knowledge-of-network-dependencies">Limited knowledge of network dependencies&lt;/h3>
&lt;ul>
&lt;li>&lt;em>Azure Migrate&lt;/em> can help to &lt;a href="https://learn.microsoft.com/en-us/azure/migrate/concepts-dependency-visualization">map all the dependencies of network and assets&lt;/a>.
&lt;ul>
&lt;li>+ &lt;a href="https://az-mdv.az.vupti.me/">Azure Migrate Network Flows Analysis&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Other tools like &lt;em>VMware Aria Operations for Networks&lt;/em>.&lt;/li>
&lt;/ul>
&lt;h2 id="vmware-hybrid-cloud-extension-hcx">VMware Hybrid Cloud Extension (HCX)&lt;/h2>
&lt;p>VMware HCX is a powerful tool that can help you extend your network and keep your IP addresses during the migration to Azure VMware Solution (AVS). It provides a seamless way to migrate workloads while maintaining their existing IP addresses, which can simplify the migration process and reduce downtime.&lt;/p>
&lt;div class="notices info">
&lt;div class="label">Note&lt;/div>
&lt;p>HCX Enterprise is a &lt;strong>free add-on for AVS&lt;/strong>: you can use it to migrate workloads from on-premises to AVS without any additional cost.&lt;/p>
&lt;/div>
&lt;h3 id="prerequisites-to-consider-for-hcx-l2-extensions">Prerequisites to consider for HCX L2 Extensions&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Prerequisites&lt;/th>
&lt;th>Mitigation&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>(Standard) vSwitch are not supported by HCX to extend L2 network. &lt;br>→ Consider migrating to &lt;em>Distributed-vSwitch&lt;/em>&lt;/td>
&lt;td>&lt;ul>&lt;li>Easy to validate,&lt;/li>&lt;li>Relatively easy to remediate&lt;/li>&lt;/ul>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>HCX supports of NSX-V to NSX-T migration is &lt;a href="https://techdocs.broadcom.com/us/en/vmware-cis/hcx/vmware-hcx/4-11/hcx-4-11-release-notes/vmware-hcx-411-release-notes.html">deprecated in version 4.11&lt;/a>&lt;/td>
&lt;td>&lt;ul>&lt;li>Easy to validate,&lt;/li>&lt;li>Currently supported&lt;/li>&lt;/ul>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>HCX supports migration for vSphere and vCenter 6.5 &lt;a href="https://knowledge.broadcom.com/external/article?articleNumber=321571">with limited support&lt;/a>&lt;/td>
&lt;td>&lt;ul>&lt;li>Easy to validate,&lt;/li>&lt;li>Currently supported&lt;/li>&lt;/ul>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="traffic-tromboning-mitigation-with-hcx-mobility-optimized-network-mon">Traffic tromboning mitigation with HCX Mobility Optimized Network (MON)&lt;/h3>
&lt;p>One of the key benefits of using HCX is its ability to optimize network traffic and reduce latency. &lt;em>HCX Mobility Optimized Network (MON)&lt;/em> is a feature that helps to minimize the tromboning effect by optimizing the path that traffic takes between migrated and non-migrated assets or with resources in other networks.&lt;/p>
&lt;p>In a previous post (&lt;a href="https://vuptime.io/post/2023-08-17-hcx-to-the-mon-and-back/#mobility-optimized-network-enablement">VMware HCX: To the MON &amp;amp; Back&lt;/a>), we had the opportunity to see how HCX MON is working and how to configure it to greatly reduce the tromboning effect.&lt;/p>
&lt;p>&lt;figure>
&lt;picture>
&lt;img
loading="lazy"
decoding="async"
alt="Network path example with HCX L2 network extension and MON feature enabled"
class="image_figure image_internal image_unprocessed"
src="https://vuptime.io/images/hcx-mon/scenario5-no-policy-routes.png"
/>
&lt;/picture>
&lt;/figure>
&lt;/p>
&lt;h2 id="nsx-autonomous-edge">NSX Autonomous Edge&lt;/h2>
&lt;p>An alternative approach to HCX is to use NSX Autonomous Edge (NSX AE) to extend your network and keep your IP addresses during the migration to Azure VMware Solution (AVS). This approach will rely on NSX-T VPN features to create tunnels between the on-premises and cloud environments, allowing you to extend your network and keep your IP addresses while migrating workloads.&lt;/p>
&lt;div class="notices info">
&lt;div class="label">Note&lt;/div>
&lt;p>Note: Standard vSwitch are supported with NSX AE.&lt;/p>
&lt;/div>
&lt;h3 id="prerequisites-and-limitations-to-consider-for-nsx-l2-extensions">Prerequisites and limitations to consider for NSX L2 Extensions&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Prerequisites&lt;/th>
&lt;th>Mitigation&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Trunk interface required to extend multiple VLANs.&lt;br>&lt;ul>&lt;li>Promiscuous Mode required.&lt;/li>&lt;li>Forget Transmit required.&lt;/li>&lt;/ul>&lt;/td>
&lt;td>&lt;ul>&lt;li>Easy to validate,&lt;/li>&lt;li>Easy to remediate&lt;/li>&lt;/ul>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>No HCX MON-like optimization.&lt;/td>
&lt;td>Network extension cutover is recommended as soon as migration is completed.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Download NSX AE OVF requires Broadcom entitlement.&lt;/td>
&lt;td>n/a&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>In conclusion, keeping your IP addresses while migrating to Azure VMware Solution (AVS) is not a complex process but requires &lt;strong>careful planning and consideration of network principles&lt;/strong>.&lt;/p>
&lt;p>By leveraging VMware Hybrid Cloud Extension (HCX) Layer 2 extensions or NSX Autonomous Edge, you can simplify the migration process and avoid/reduce downtime while maintaining existing IP addresses.&lt;/p></description></item><item><title>VMware HCX: To the MON &amp; Back</title><link>https://vuptime.io/post/2023-08-17-hcx-to-the-mon-and-back/</link><pubDate>Thu, 17 Aug 2023 00:00:00 +0000</pubDate><guid>https://vuptime.io/post/2023-08-17-hcx-to-the-mon-and-back/</guid><description>
&lt;p>No, we are not switching to a music blog genre to discuss the &lt;em>&amp;quot;To the Moon &amp;amp; Back&amp;quot;&lt;/em> song from &lt;strong>Savage Garden&lt;/strong> (I am sorry if you were expecting that) There is no typo in the title: we are going to explore VMware HCX network extensions and the MON feature, aka &lt;em>Mobility Optimized Network&lt;/em>.&lt;/p>
&lt;p>If you are not familiar with HCX, it is a VMware solution that allows you to migrate workloads from on-premises to the cloud, or from cloud to cloud. It also allows you to stretch your networks from migration source to the destination. It is a very powerful solution that can be used in many different scenarios to accelerate a migration project.&lt;/p>
&lt;p>In this article, we are going to focus on the network extension part of HCX, and more specifically on a poorly understood feature: &lt;em>Mobility Optimized Network&lt;/em>.&lt;/p>
&lt;h2 id="what-are-we-not-going-to-talk-about">What are we not going to talk about&lt;/h2>
&lt;p>In this post, I will no cover the creation of HCX network extensions in details. I assume that this subject is already well documented on Internet, including the official documentation and does not require a lot of explanations if you are already familiar with HCX.&lt;/p>
&lt;h2 id="lab-setup">Lab setup&lt;/h2>
&lt;p>In order to document this post, I created a lab based on the following topology:&lt;/p>
&lt;p>&lt;figure>
&lt;picture>
&lt;img
loading="lazy"
decoding="async"
alt="Lab topology"
class="image_figure image_internal image_unprocessed"
src="https://vuptime.io/images/hcx-mon/lab-topology.png"
/>
&lt;/picture>
&lt;/figure>
&lt;/p>
&lt;p>In this lab we have:&lt;/p>
&lt;ul>
&lt;li>An on-premises-like environment with a vCenter and hypervisors, hosting:
&lt;ul>
&lt;li>A network (&lt;code>10.100.115.0/24&lt;/code>)&lt;/li>
&lt;li>A routing device (&lt;code>gw&lt;/code> @ &lt;code>10.100.115.1&lt;/code>) and its northbound connectivity (Internet + Cloud connectivity)&lt;/li>
&lt;li>A set of virtual machines to be migrated to the cloud: &lt;code>migration-vm-X&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>a cloud environment (Azure based) with:
&lt;ul>
&lt;li>Landing of the ExpressRoute circuit&lt;/li>
&lt;li>A point-to-site VPN gateway for my workstation&lt;/li>
&lt;li>A vNET: &lt;code>10.100.2.0/24&lt;/code>&lt;/li>
&lt;li>An Azure native VM on this vNET: &lt;code>azure-vm&lt;/code> @ &lt;code>10.100.2.36&lt;/code>&lt;/li>
&lt;li>An Azure VMware Solution SDDC with:
&lt;ul>
&lt;li>Express Route (ER) + Global Reach connectivity&lt;/li>
&lt;li>HCX Enterprise deployed and configured&lt;/li>
&lt;li>A native NSX-T segment with direct AVS connectivity with a test VM: &lt;code>10.100.110.0/24&lt;/code> and &lt;code>Ubuntu01&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>I extended the on-premises network to the cloud using HCX network extension in order to prepare the migration of the VMs. The extended network (&lt;code>10.100.115.0/24&lt;/code>) is now available in the cloud-side.&lt;/p>
&lt;h2 id="default-network-connectivity">Default network connectivity&lt;/h2>
&lt;p>Before we start migrating VMs, let's have a look at the default network connectivity on premises:&lt;/p>
&lt;p>&lt;figure>
&lt;picture>
&lt;img
loading="lazy"
decoding="async"
alt="Default network connectivity on-premises"
class="image_figure image_internal image_unprocessed"
src="https://vuptime.io/images/hcx-mon/scenario1-onpremises.png"
/>
&lt;/picture>
&lt;/figure>
&lt;/p>
&lt;p>&lt;code>migration-vm-X&lt;/code> is using the on-premises &lt;code>gw&lt;/code> device and its default route to reach the Internet &lt;span style="color:#FF0080;font-weight:bold;">(↔ pink)&lt;/span>. The &lt;code>gw&lt;/code> device is also used to reach the cloud environment, through the ExpressRoute circuit &lt;span style="color:#FF9933;font-weight:bold;">(↔ orange)&lt;/span>. To reach an Azure VMware Solution based VM, the ER circuit is used in addition with Global Reach and the AVS ER circuit &lt;span style="color:#FF2626;font-weight:bold;">(↔ red)&lt;/span>.&lt;/p>
&lt;h2 id="migrate-a-vm-to-the-cloud-environment">Migrate a VM to the cloud environment&lt;/h2>
&lt;p>Let's migrate &lt;code>migration-vm-2&lt;/code> to the cloud environment using HCX. The migration is successful and the VM is now running in the cloud environment. The VM is still using the on-premises &lt;code>gw&lt;/code> device to reach both the Internet and the cloud environment as its default gateway is still configured to &lt;code>10.100.115.1&lt;/code>.&lt;/p>
&lt;p>&lt;figure>
&lt;picture>
&lt;img
loading="lazy"
decoding="async"
alt="migration-vm-2 still relies on its on-premises based gateway to reach resources out-of-its L2 broadcast domain"
class="image_figure image_internal image_unprocessed"
src="https://vuptime.io/images/hcx-mon/scenario2-migrated-vm.png"
/>
&lt;/picture>
&lt;/figure>
&lt;/p>
&lt;p>To reach Internet &lt;span style="color:#FF0080;font-weight:bold;">(↔ pink)&lt;/span> or cloud based resources &lt;span style="color:#FF9933;font-weight:bold;">(↔ orange)&lt;/span>, the network path is not optimal and this is even more obvious when we look at path to reach VM in another NSX-T segment of AVS &lt;span style="color:#FF2626;font-weight:bold;">(↔ red)&lt;/span>. We call this situation: &lt;a href="https://en.wikipedia.org/wiki/Anti-tromboning">&lt;em>(w)&lt;/em> network tromboning&lt;/a>.&lt;/p>
&lt;h3 id="segment-connectivity">Segment connectivity&lt;/h3>
&lt;p>On NSX-T, when the network extension was created, a segment with the same subnet settings was created and named with &lt;code>L2E_&lt;/code> prefix.&lt;/p>
&lt;p>&lt;figure>
&lt;picture>
&lt;img
loading="lazy"
decoding="async"
alt="Segment connectivity of L2E network"
class="image_figure image_internal image_unprocessed"
src="https://vuptime.io/images/hcx-mon/scenario2-nsx-t-connectivity.png"
/>
&lt;/picture>
&lt;/figure>
&lt;/p>
&lt;p>As you can see in the screenshot, this segment is configured with a &lt;strong>disabled&lt;/strong> &lt;code>gateway connectivity&lt;/code>. This means that the segment is not advertised to the other components of the NSX-T fabric cannot use the T1 gateway for L3 connectivity.&lt;/p>
&lt;h2 id="mobility-optimized-network-enablement">Mobility Optimized Network enablement&lt;/h2>
&lt;p>In order to improve the network path, we are going to enable the Mobility Optimized Network feature of HCX. This feature is available in the HCX UI, in the &lt;strong>Network Extension&lt;/strong> section, and can be enabled on a per-network basis.&lt;/p>
&lt;p>If we enable this feature, and not change the default settings, the connectivity of the segment is switched to &lt;strong>enabled&lt;/strong> and the T1 gateway &lt;strong>may&lt;/strong> now be used for L3 connectivity.&lt;/p>
&lt;p>&lt;figure>
&lt;picture>
&lt;img
loading="lazy"
decoding="async"
alt="Mobility Optimized Network enablement"
class="image_figure image_internal image_unprocessed"
src="https://vuptime.io/images/hcx-mon/scenario3-default-mon.png"
/>
&lt;/picture>
&lt;/figure>
&lt;/p>
&lt;p>As you probably noticed, network paths are not changed for the migrated VM. This is due to the default setting for &lt;em>router-location&lt;/em>: &lt;code>hcx-enterprise&lt;/code>.&lt;/p>
&lt;blockquote>
&lt;p>The &lt;em>router-location&lt;/em> &lt;code>hcx-enterprise&lt;/code> setting value means that on-premises &lt;code>gw&lt;/code> device is still used as the default gateway for the migrated VM.&lt;/p>&lt;/blockquote>
&lt;p>&lt;figure>
&lt;picture>
&lt;img
loading="lazy"
decoding="async"
alt="Router location for the migrated VM with default settings::picture-border"
class="image_figure image_internal image_unprocessed"
src="https://vuptime.io/images/hcx-mon/scenario3-router-location.png"
/>
&lt;/picture>
&lt;/figure>
&lt;/p>
&lt;h3 id="segment-connectivity-1">Segment connectivity&lt;/h3>
&lt;p>Let's have a look at the segment connectivity after enabling the Mobility Optimized Network feature:&lt;/p>
&lt;p>&lt;figure>
&lt;picture>
&lt;img
loading="lazy"
decoding="async"
alt="Segment connectivity of L2E network with MON enabled"
class="image_figure image_internal image_unprocessed"
src="https://vuptime.io/images/hcx-mon/scenario3-nsx-t-connectivity.png"
/>
&lt;/picture>
&lt;/figure>
&lt;/p>
&lt;p>The &lt;code>gateway connectivity&lt;/code> is now &lt;strong>enabled&lt;/strong> on the L2E segment, and the T1 gateway could now used for L3 connectivity (depending on the &lt;em>router-location&lt;/em> setting).&lt;/p>
&lt;p>In BGP advertisement in the Express Route circuits, we can also see a new &lt;code>/32&lt;/code> route advertised from NSX-T:&lt;/p>
&lt;ul>
&lt;li>&lt;code>10.100.115.1/32&lt;/code>: the gateway of the extended network.&lt;/li>
&lt;/ul>
&lt;h2 id="changing-the-router-location">Changing the &lt;em>router-location&lt;/em>&lt;/h2>
&lt;p>To improve the network path for the migrated VM, we may be tempted to change the &lt;em>router-location&lt;/em> setting to use the cloud side gateway for our migrated VM:&lt;/p>
&lt;p>&lt;figure>
&lt;picture>
&lt;img
loading="lazy"
decoding="async"
alt="Router location for the migrated VM with cloud side gateway::picture-border"
class="image_figure image_internal image_unprocessed"
src="https://vuptime.io/images/hcx-mon/scenario4-cloud-router-location.png"
/>
&lt;/picture>
&lt;/figure>
&lt;/p>
&lt;p>The following changes will be applied to network path:&lt;/p>
&lt;p>&lt;figure>
&lt;picture>
&lt;img
loading="lazy"
decoding="async"
alt="Network path when the router location is changed to cloud side gateway"
class="image_figure image_internal image_unprocessed"
src="https://vuptime.io/images/hcx-mon/scenario4-cloud-router-location-network-flows.png"
/>
&lt;/picture>
&lt;/figure>
&lt;/p>
&lt;ul>
&lt;li>The default gateway configured at the the VM/OS is not changed: &lt;code>10.100.115.1&lt;/code> but...&lt;/li>
&lt;li>To reach a VM in a distinct NSX-T segment, the traffic will be routed through the T1 gateway of the segment, and not through the on-premises &lt;code>gw&lt;/code> device &lt;span style="color:#FF2626;font-weight:bold;">(↔ red)&lt;/span>.&lt;/li>
&lt;li>To reach the Internet, the traffic will be routed through the T1 gateway of the segment, and not through the on-premises &lt;code>gw&lt;/code> device &lt;span style="color:#FF0080;font-weight:bold;">(↔ pink)&lt;/span>.&lt;/li>
&lt;li>To reach a VM in the native cloud environment, the traffic will be routed through the on-premises &lt;code>gw&lt;/code> device &lt;span style="color:#FF9933;font-weight:bold;">(⇠ orange)&lt;/span>.
&lt;ul>
&lt;li>But the return path will be through the T1 gateway of the segment &lt;span style="color:#FF9933;font-weight:bold;">(⇠ orange)&lt;/span>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>As you can see there, if the network path to AVS hosted or Internet resources seems optimized, the path to native cloud resources is not and is asymmetric. This is because of a setting category in Mobility Optimized Network feature: &lt;strong>policy routes&lt;/strong>. We will explore this setting in the next sections.&lt;/p>
&lt;h3 id="what-happened-in-the-backstages">What happened in the backstages&lt;/h3>
&lt;p>When we changed the &lt;em>router-location&lt;/em> setting, the following change was applied:&lt;/p>
&lt;p>If we have a look at the routing table of the T1 gateway, a new entry was added for the migrated VM:&lt;/p>
&lt;p>&lt;figure>
&lt;picture>
&lt;img
loading="lazy"
decoding="async"
alt="Routing table of the T1 gateway"
class="image_figure image_internal image_unprocessed"
src="https://vuptime.io/images/hcx-mon/scenario3-static-routes.png"
/>
&lt;/picture>
&lt;/figure>
&lt;/p>
&lt;p>&lt;figure>
&lt;picture>
&lt;img
loading="lazy"
decoding="async"
alt="Next hop of the static route for the migrated VM"
class="image_figure image_internal image_unprocessed"
src="https://vuptime.io/images/hcx-mon/scenario3-static-route-next-hop.png"
/>
&lt;/picture>
&lt;/figure>
&lt;/p>
&lt;p>On the Express Route circuit, 2 new routes are also visible, advertised over BGP from NSX-T:&lt;/p>
&lt;ul>
&lt;li>&lt;code>10.100.115.1/32&lt;/code>: the gateway of the network is now advertised from AVS (&lt;em>this route was already advertised since the MON enablement&lt;/em>)&lt;/li>
&lt;li>&lt;code>10.100.115.12/32&lt;/code>: the migrated VM with MON enabled and &lt;em>router-location&lt;/em> set to HCX cloud instance.&lt;/li>
&lt;/ul>
&lt;h3 id="asymmetric-routing">Asymmetric routing&lt;/h3>
&lt;p>As you see on the &lt;a href="https://vuptime.io/post/2023-08-17-hcx-to-the-mon-and-back/#changing-the-router-location">network flow to a cloud based resource&lt;/a> (in a private network), there is an asymmetric routing. The traffic is routed through the on-premises &lt;code>gw&lt;/code> device to reach the cloud based resource, but the reverse path is going through the T1 gateway of the segment &lt;span style="color:#FF9933;font-weight:bold;">(⇠ orange)&lt;/span>, on cloud side.&lt;/p>
&lt;p>As NSX-T is now publishing the &lt;code>/32&lt;/code> route of the migrated VM, cloud resources can now reach the migrated VM directly through the T1 gateway of the segment. This is the reason why this, cloud resource to AVS one, path is through the T1 gateway.&lt;/p>
&lt;p>The reason of the &lt;code>migration-vm-X&lt;/code> to use the on-premises &lt;code>gw&lt;/code> device to reach the cloud based resource is because of the default &lt;strong>policy routes&lt;/strong> setup when MON is enabled:&lt;/p>
&lt;p>&lt;figure>
&lt;picture>
&lt;img
loading="lazy"
decoding="async"
alt="Default policy routes when MON is enabled::picture-border"
class="image_figure image_internal image_unprocessed"
src="https://vuptime.io/images/hcx-mon/scenario3-default-policy-routes.png"
/>
&lt;/picture>
&lt;/figure>
&lt;/p>
&lt;p>By default, the &lt;strong>policy routes&lt;/strong> are configured to be &lt;em>allowed&lt;/em> to use the on-premises &lt;code>gw&lt;/code> device as the default gateway for the traffic matching the RFC1918 address spaces:&lt;/p>
&lt;ul>
&lt;li>&lt;code>10.0.0.0/8&lt;/code>&lt;/li>
&lt;li>&lt;code>172.16.0.0/12&lt;/code>&lt;/li>
&lt;li>&lt;code>192.168.0.0/16&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>This enable the migrated VM to reach other resources of the on-premises network, via on-premises &lt;code>gw&lt;/code> device as the default gateway, but if not customized, it also introduces an asymmetric routing for the traffic to cloud based resources.&lt;/p>
&lt;h2 id="lets-customize-the-policy-routes">Let's customize the policy routes&lt;/h2>
&lt;h3 id="remove-all-policy-routes">Remove all policy routes&lt;/h3>
&lt;p>A good illustration to understand the impact of the policy routes is to do a test by removing all the pre-configured policy routes.&lt;/p>
&lt;p>&lt;figure>
&lt;picture>
&lt;img
loading="lazy"
decoding="async"
alt="Network path when there is no policy routes"
class="image_figure image_internal image_unprocessed"
src="https://vuptime.io/images/hcx-mon/scenario5-no-policy-routes.png"
/>
&lt;/picture>
&lt;/figure>
&lt;/p>
&lt;p>For Internet &lt;span style="color:#FF0080;font-weight:bold;">(↔ pink)&lt;/span> or AVS based resources &lt;span style="color:#FF2626;font-weight:bold;">(↔ red)&lt;/span>, the network path is still the one from the previous section.&lt;/p>
&lt;p>For native cloud resources &lt;span style="color:#FF9933;font-weight:bold;">(↔ orange)&lt;/span>, the network path is now symmetric as the migrated VM is using the T1 gateway of the segment to reach all the resources out-of its L2 broadcast domain.&lt;/p>
&lt;p>&lt;strong>This setup could be sub-optimal&lt;/strong> for the migrated VM to reach on-premises resources, but this is something that can be customized by adding a new policy route with more specific matching criteria for the on-premises resources.&lt;/p>
&lt;h3 id="add-a-very-specific-policy-route">Add a very specific policy route&lt;/h3>
&lt;p>Another good illustration of how policy routes work in a MON enabled network extension is to add a very specific policy route to reach a specific resource with an optimal path.&lt;/p>
&lt;p>In our example, we will recreate the default policy routes and add a &lt;code>/32&lt;/code> one with a &lt;code>deny&lt;/code> rule, matching the Azure hosted resource &lt;code>azure-vm&lt;/code>:&lt;/p>
&lt;ul>
&lt;li>&lt;code>10.0.0.0/8&lt;/code>: Send to source with HCX: &lt;span style="color:#00CC00;">allow&lt;span>&lt;/li>
&lt;li>&lt;code>172.16.0.0/12&lt;/code>: Send to source with HCX: &lt;span style="color:#00CC00;">allow&lt;span>&lt;/li>
&lt;li>&lt;code>192.168.0.0/16&lt;/code>: Send to source with HCX: &lt;span style="color:#00CC00;">allow&lt;span>&lt;/li>
&lt;li>&lt;code>10.100.2.36/32&lt;/code>: Send to source with HCX: &lt;span style="color:#FF2626;">deny&lt;span>&lt;/li>
&lt;/ul>
&lt;p>In this new setup, network path to the Azure hosted resource &lt;code>azure-vm&lt;/code> is now optimized in both directions:&lt;/p>
&lt;p>&lt;figure>
&lt;picture>
&lt;img
loading="lazy"
decoding="async"
alt="Network path when there is a very specific policy routes"
class="image_figure image_internal image_unprocessed"
src="https://vuptime.io/images/hcx-mon/scenario6-specific-policy-route.png"
/>
&lt;/picture>
&lt;/figure>
&lt;/p>
&lt;ul>
&lt;li>To reach on premises resources in a private RFC1918 ranges (like in &lt;code>10.0.0.0/8&lt;/code>), the on-prem &lt;code>gw&lt;/code> device is used &lt;span style="color:#4D27AA;font-weight:bold;">(↔ purple)&lt;/span>.&lt;/li>
&lt;li>To reach a cloud based specific resource (&lt;code>10.100.2.36/32&lt;/code>), the cloud side gateway is used &lt;span style="color:#FF9933;font-weight:bold;">(↔ orange)&lt;/span>.&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Note: I removed the internet connectivity to simplify the diagram but there is no change in the network path to reach Internet.&lt;/p>&lt;/blockquote>
&lt;h2 id="use-policy-routes-for-internet-connectivity">Use policy routes for internet connectivity&lt;/h2>
&lt;p>In the previous section, we saw that we can use policy routes to optimize the network path to reach a specific resource. We can also use policy routes to optimize or guide the network path to reach Internet (or &lt;code>0.0.0.0/0&lt;/code>).&lt;/p>
&lt;h3 id="internet-egress-with-default-policy-routes">Internet egress with default policy routes&lt;/h3>
&lt;p>Let's have a look at the network path to reach Internet with the default policy routes (&lt;em>router-location&lt;/em> is set to cloud side gateway):&lt;/p>
&lt;p>&lt;figure>
&lt;picture>
&lt;img
loading="lazy"
decoding="async"
alt="Network path to reach Internet with default policy routes and router-location set to cloud side gateway"
class="image_figure image_internal image_unprocessed"
src="https://vuptime.io/images/hcx-mon/scenario7-internet-with-default-policy-routes.png"
/>
&lt;/picture>
&lt;/figure>
&lt;/p>
&lt;p>As Internet (&lt;code>0.0.0.0/0&lt;/code>) is not part of the RFC1918 address spaces configured to use the On-Prem gateway (with the default policy routes), the migrated VM is using the T1 gateway and the Azure egress connectivity of the segment to reach Internet &lt;span style="color:#FF0080;font-weight:bold;">(↔ pink)&lt;/span>.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note&lt;/strong>: The azure egress path to reach Internet may vary depending on the configuration of the Azure VMware Solution SDDC. In this example, the Azure egress is configured to the default &lt;a href="https://vuptime.io/post/2022-08-12-azure-vmware-solution-public-ip-on-nsx-edge/#enable-outbound-internet-access-using-snat">&lt;em>Microsoft Managed SNAT&lt;/em>&lt;/a>.
You can find some details about the Internet connectivity for AVS, in the following post: &lt;a href="https://vuptime.io/post/2022-08-12-azure-vmware-solution-public-ip-on-nsx-edge/">Azure VMware Solution – Use public IP on NSX-T Edge&lt;/a>.&lt;/p>&lt;/blockquote>
&lt;h3 id="internet-egress-with-a-specific-policy-route">Internet egress with a specific policy route&lt;/h3>
&lt;p>Let's add a specific policy route to reach Internet through the on-premises &lt;code>gw&lt;/code> device (&lt;em>router-location&lt;/em> is still set to cloud side gateway):&lt;/p>
&lt;ul>
&lt;li>&lt;code>0.0.0.0/0&lt;/code>: Send to source with HCX: &lt;span style="color:#00CC00;">allow&lt;span>&lt;/li>
&lt;/ul>
&lt;p>&lt;figure>
&lt;picture>
&lt;img
loading="lazy"
decoding="async"
alt="Network path to reach Internet with a specific policy route and router-location set to cloud side gateway"
class="image_figure image_internal image_unprocessed"
src="https://vuptime.io/images/hcx-mon/scenario8-internet-with-specific-policy-route.png"
/>
&lt;/picture>
&lt;/figure>
&lt;/p>
&lt;p>With this new policy route, the migrated VM is now using the on-premises &lt;code>gw&lt;/code> device to reach Internet &lt;span style="color:#FF0080;font-weight:bold;">(↔ pink)&lt;/span>. You can then apply some firewall rules on the on-premises &lt;code>gw&lt;/code> device to control the Internet access of the migrated VM.&lt;/p>
&lt;p>Without additional policy routes, all the network flows will also use this on-premises &lt;code>gw&lt;/code> device: it could be counter-productive to enable MON in this case without adding additional policy routes to optimize the network path to reach other resources.&lt;/p>
&lt;h2 id="an-art-of-balance">An art-of-balance&lt;/h2>
&lt;div class="notices info">
&lt;div class="label">Disclaimer&lt;/div>
&lt;p>Do not reproduce the previous examples on a production environment.&lt;/p>
&lt;/div>
&lt;p>Previous examples are provided to illustrate the behavior of MON enabled resources and network flows based on settings changes. You will probably need to consider carefully how-to apply global and/or specific flows policies based on your deployment to avoid any issue and to maintain the expected level of security on the network flow path.&lt;/p>
&lt;p>For example, once a flow is using the NSX-T Tier1, it is not secured anymore by the on-premises firewall and may require to have some firewall rules setup on NSX-T level.&lt;/p>
&lt;p>Also, MON is coming with &lt;a href="https://docs.vmware.com/en/VMware-HCX/4.7/hcx-user-guide/GUID-BEC26054-D560-46D0-98B4-7FF09501F801.html">some limitations to consider&lt;/a> and may not be suitable for all the use cases. A good review of existing documentation is mandatory before proceeding in MON enablement. A good starting-point for AVS resources is the following documentation page: &lt;a href="https://learn.microsoft.com/en-us/azure/azure-vmware/vmware-hcx-mon-guidance">VMware HCX Mobility Optimized Networking (MON) guidance&lt;/a>.&lt;/p>
&lt;p>Finally, I will strongly suggest to consider network-extension &lt;em>cutover&lt;/em> operation as a critical step of your migration project and to plan it carefully. Mobility Optimized Networking feature is a great helper to optimize the network flow path, avoid or limit network tromboning scenario but should be considered as a tool to help you to achieve your migration goal and not as a magic feature that will solve all your network issues or provide a way to skip network extension cutovers operations. For long term network extensions, changing the default gateway of the migrated VM to the cloud side gateway may be a good option to optimize network flows.&lt;/p></description></item><item><title>Third-party firewall NVA in Azure VMware Solution NSX-T deployment</title><link>https://vuptime.io/post/2023-07-24-third-party-nva-in-avs-nsxt/</link><pubDate>Mon, 24 Jul 2023 00:00:00 +0000</pubDate><guid>https://vuptime.io/post/2023-07-24-third-party-nva-in-avs-nsxt/</guid><description>
&lt;p>In a previous series of blog posts (posts: &lt;a href="https://vuptime.io/post/2023-02-22-mockup-avs-in-hub-and-spoke-topology-part1/">1&lt;/a>, &lt;a href="https://vuptime.io/post/2023-02-28-mockup-avs-in-hub-and-spoke-topology-part2/">2&lt;/a> &amp;amp; &lt;a href="https://vuptime.io/post/2023-03-07-mockup-avs-in-hub-and-spoke-topology-part3/">3&lt;/a>), we covered the deployment of a third-party firewall Network Virtual Appliance (NVA) in Azure to integrate an Azure VMware Solution (AVS) deployment in a Hub&amp;amp;Spoke network topology. This setup enable traffic filtering for &lt;em>ingress&lt;/em> and &lt;em>egress&lt;/em> traffic &lt;em>to&lt;/em> and &lt;em>from&lt;/em> the AVS environment (N/S) but do not provide any filtering between AVS workloads (E/W). The recommended way to achieve this is to rely on the NSX-T distributed firewall capabilities.&lt;/p>
&lt;p>In this blog post, we will cover the deployment of a third-party firewall NVA in an AVS SDDC itself to provide traffic filtering between AVS workloads without relying on the NSX-T distributed firewall capabilities.&lt;/p>
&lt;p>I will not discuss here the reasons to deploy a 3&lt;sup>rd&lt;/sup> firewall NVA in AVS SDDC. I will just mention that this is a common request from customers that want to continue using the same firewall technology in AVS that they have been using for an on-premises datacenter.&lt;/p>
&lt;p>This topic was also covered by several colleagues of mine in previous blog posts:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://techcommunity.microsoft.com/t5/azure-migration-and/firewall-integration-in-azure-vmware-solution/ba-p/2254961">Third-party firewall NVA in Azure VMware Solution&lt;/a> by &lt;a href="https://techcommunity.microsoft.com/t5/user/viewprofilepage/user-id/704914">Amit Aneja&lt;/a> (Microsoft).&lt;/li>
&lt;li>&lt;a href="https://vskeeball.com/2022/03/28/third-party-firewalls-in-avs/">Third Party Firewalls in AVS&lt;/a> by &lt;a href="https://www.linkedin.com/in/kenyonhensler/">Kenyon Hensler&lt;/a> (Microsoft).&lt;/li>
&lt;li>&lt;a href="https://www.virtualworkloads.com/2020/07/azure-vmware-solution-connecting-3rd-party-networking-and-security-platforms/">Azure VMware Solution: Connecting 3rd Party Networking and Security Platforms&lt;/a> By: &lt;a href="https://www.linkedin.com/in/vcdx076/">Gourav Bhardwaj&lt;/a> (VMware), &lt;a href="https://www.virtualworkloads.com/author/trevordavis/">Trevor Davis&lt;/a> (Microsoft) and &lt;a href="https://www.linkedin.com/in/jjtm/">Jeffrey Moore&lt;/a> (VMware).&lt;/li>
&lt;/ul>
&lt;p>I will try to provide some details to help in the deployment of a such solution.&lt;/p>
&lt;h2 id="default-avs-topology">Default AVS topology&lt;/h2>
&lt;p>By default, an AVS SDDC is deployed with preprovisioned NSX-T Tier-0 and Tier-1 Gateways. The Tier-0 Gateway is used to connect the AVS SDDC to &lt;em>Top-of-rack&lt;/em> and Azure SDN, and is fully Microsoft-managed. The default Tier-1 Gateway can be used to deploy network segments and is customer-managed. Customers can also create more Tier-1 Gateways if needed.&lt;/p>
&lt;p>&lt;figure>
&lt;picture>
&lt;img
loading="lazy"
decoding="async"
alt="AVS default topology"
class="image_figure image_internal image_unprocessed"
src="https://vuptime.io/images/avs-3rd-party-nva-nsx/nsxtwith3rdpartyfw-default-topology.png"
/>
&lt;/picture>
&lt;/figure>
&lt;/p>
&lt;h2 id="challenges-of-inserting-a-third-party-firewall-nva-in-avs-sddc">Challenges of inserting a third-party firewall NVA in AVS SDDC&lt;/h2>
&lt;p>The first limit to understand with 3&lt;sup>rd&lt;/sup> party NVA insertion in AVS SDDC is that it is not possible to rely on &lt;a href="https://docs.vmware.com/en/VMware-NSX/4.1/administration/GUID-891363D9-D7D6-418B-9C81-33F2A42EA665.html">NSX-T &lt;em>Service Insertion&lt;/em>&lt;/a> capabilities. This limit is mostly driven by the &amp;quot;&lt;em>managed&lt;/em>&amp;quot; nature of Azure VMware Solution.&lt;/p>
&lt;p>A second limit to consider it that 3&lt;sup>rd&lt;/sup> party NVA deployed in the AVS SDDC are limited by the number of virtual network interfaces that can be attached to a single VM. With only 10 NICs available per Virtual Machine, it is not possible to directly connect an NVA to a deployment with more than 9 workload segments.&lt;/p>
&lt;p>A possible mitigation is to use a &lt;em>Transit Segment&lt;/em>. This &lt;em>Transit Segment&lt;/em> will be connected to additional Tier-1 Gateway and will be used to route traffic between the NVA and the workload segments via additional Tier-1 Gateways. In this topology, the new limit will be based on the maximum number of Tier-1 Gateways that can be deployed in an AVS SDDC and/or the size of the transit subnet address plan. This enables provisioning 100s of workload segments if needed.&lt;/p>
&lt;h2 id="layered-network-topology">Layered network topology&lt;/h2>
&lt;p>In order to deploy a third-party firewall NVA in an AVS SDDC, we will need to deploy a layered network topology. This topology will be composed of 3 layers:&lt;/p>
&lt;ul>
&lt;li>A &lt;strong>Root-segment&lt;/strong>, connected to the first layer of Tier-1 gateway (like the one deployed by default) and to the NVA uplink.&lt;/li>
&lt;li>One or more &lt;strong>Transit-segment&lt;/strong>, connected to the NVA downlink(s) and a second layer of Tier-1 gateways&lt;/li>
&lt;li>Workload-segments where the Virtual Machines will be deployed.&lt;/li>
&lt;/ul>
&lt;p>&lt;figure>
&lt;picture>
&lt;img
loading="lazy"
decoding="async"
alt="AVS layered topology"
class="image_figure image_internal image_unprocessed"
src="https://vuptime.io/images/avs-3rd-party-nva-nsx/nsxtwith3rdpartyfw-layered-topology.png"
/>
&lt;/picture>
&lt;/figure>
&lt;/p>
&lt;h3 id="transit-segment-or-transit-segments">Transit-segment or Transit-segment&lt;u>s&lt;/u>&lt;/h3>
&lt;p>There are two possible strategies regarding the number of &lt;em>Transit-segment&lt;/em> to deploy:&lt;/p>
&lt;ol>
&lt;li>Using multiple &lt;em>Transit-segments&lt;/em> enable to deploy up to 8 additional Tier-1 gateways. Each Tier-1 gateway can be link to up to 1000 workload segments.&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>This setup will provide scalability &lt;a href="https://vuptime.io/post/2023-07-24-third-party-nva-in-avs-nsxt/#traffic-flow-analysis#east-west-inter-segment-traffic-same-tier-1">but the segments attached to a single Tier-1 gateway will not go through the NVA to communicate with each other&lt;/a>.&lt;/li>
&lt;li>This setup can be more complex to maintain and will have scalability limit if E/W traffic filtering at NVA level, is required.&lt;/li>
&lt;/ul>
&lt;ol start="2">
&lt;li>Using a single &lt;em>Transit-segment&lt;/em> enable the deployment of more Tier-1 gateways (100s) and to &lt;a href="https://vuptime.io/post/2023-07-24-third-party-nva-in-avs-nsxt/#east-west-inter-segment-traffic-different-tier-1">dedicate 1 Tier-1 gateway per workload segment&lt;/a>.&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>This &amp;quot;1 Tier-1 gateway per workload segment&amp;quot; setup will mitigate the issue mentioned above regarding the filtering of E/W traffic.&lt;/li>
&lt;li>This setup may also introduce security concerns to consider as the one mentioned in the &lt;a href="https://vuptime.io/post/2023-07-24-third-party-nva-in-avs-nsxt/#security-recommendations">Security recommendations&lt;/a> section.&lt;/li>
&lt;li>Scalability is limited to &lt;em>Transit&lt;/em> subnet size: a proper planning is required to not run out of IP addresses.&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>&lt;strong>Note&lt;/strong>: In this blog post, I will try to illustrate the two strategies.&lt;/p>&lt;/blockquote>
&lt;h3 id="static-routes">Static routes&lt;/h3>
&lt;p>In order to route traffic between the different segments, we will need to configure static routes in the Tier-1 Gateways. The following table provides an overview of the static routes that will need to be configured in the Tier-1 Gateways.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Gateway/Device&lt;/th>
&lt;th>Route&lt;/th>
&lt;th>Next Hop&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Root Tier-1&lt;/td>
&lt;td>workload segments&lt;/td>
&lt;td>NVA&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Workload Tier-1s&lt;/td>
&lt;td>default route (0/0)&lt;/td>
&lt;td>NVA&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>NVA&lt;/td>
&lt;td>workload segments&lt;/td>
&lt;td>Workload Tier-1&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Here is an example, applied to my lab environment:&lt;/p>
&lt;p>&lt;figure>
&lt;picture>
&lt;img
loading="lazy"
decoding="async"
alt="Static routes to configure"
class="image_figure image_internal image_unprocessed"
src="https://vuptime.io/images/avs-3rd-party-nva-nsx/nsxtwith3rdpartyfw-static-routes.png"
/>
&lt;/picture>
&lt;/figure>
&lt;/p>
&lt;h3 id="traffic-flow-analysis">Traffic flow analysis&lt;/h3>
&lt;h4 id="intra-segment-traffic">Intra-segment traffic&lt;/h4>
&lt;p>As you may already imagine, the traffic flow for Virtual Machines deployed in the same workload segment will not be impacted by the NVA insertion. The traffic will be routed directly between the Virtual Machines at the L2 level.&lt;/p>
&lt;p>&lt;figure>
&lt;picture>
&lt;img
loading="lazy"
decoding="async"
alt="Traffic flow between VMs in the same segment"
class="image_figure image_internal image_unprocessed"
src="https://vuptime.io/images/avs-3rd-party-nva-nsx/nsxtwith3rdpartyfw-network-flows-intra-segment.png"
/>
&lt;/picture>
&lt;/figure>
&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note&lt;/strong>: Still it is possible to filter the traffic between the Virtual Machines in the same segment by leveraging on the &lt;strong>NSX-T Distributed Firewall&lt;/strong> capabilities.&lt;/p>&lt;/blockquote>
&lt;h4 id="east-west-inter-segment-traffic-same-tier-1">East-West, Inter-segment traffic, same Tier-1&lt;/h4>
&lt;p>The traffic flow between Virtual Machines deployed in different workload segments connected to the same Tier-1 Gateway will also, not be impacted by the NVA insertion and the traffic will only pass through the Tier-1 gateway.&lt;/p>
&lt;p>&lt;figure>
&lt;picture>
&lt;img
loading="lazy"
decoding="async"
alt="Traffic flow between VMs in different segments, same T1"
class="image_figure image_internal image_unprocessed"
src="https://vuptime.io/images/avs-3rd-party-nva-nsx/nsxtwith3rdpartyfw-network-flows-side-to-side-segments.png"
/>
&lt;/picture>
&lt;/figure>
&lt;/p>
&lt;blockquote>
&lt;p>To filter this kind of network traffic, you can either rely on the &lt;strong>NSX-T Distributed Firewall&lt;/strong> or &lt;strong>Gateway Firewall&lt;/strong> capabilities.&lt;/p>&lt;/blockquote>
&lt;h4 id="east-west-inter-segment-traffic-different-tier-1">East-West, Inter-segment traffic, different Tier-1&lt;/h4>
&lt;p>The traffic flow between Virtual Machines deployed in different workload segments connected to different Tier-1 Gateways will be impacted by the NVA insertion. The traffic will be routed via the NVA and the Tier-1 Gateways.&lt;/p>
&lt;p>&lt;figure>
&lt;picture>
&lt;img
loading="lazy"
decoding="async"
alt="Traffic flow between VMs in different segments, different T1"
class="image_figure image_internal image_unprocessed"
src="https://vuptime.io/images/avs-3rd-party-nva-nsx/nsxtwith3rdpartyfw-network-flows-segment-to-segment-through-fw.png"
/>
&lt;/picture>
&lt;/figure>
&lt;/p>
&lt;p>This is the most representative configuration of the traffic flow that we want to achieve with the NVA insertion.&lt;/p>
&lt;blockquote>
&lt;p>In order to generalize this configuration, we will need to deploy a &lt;strong>Tier-1 Gateway per workload segment&lt;/strong>.&lt;/p>&lt;/blockquote>
&lt;h4 id="north-south-traffic">North-South traffic&lt;/h4>
&lt;p>North-South traffic will also be impacted by the NVA insertion. The traffic will be routed via the NVA to reach all the targets on the north-side of the NVA. Either Virtual Machines deployed directly on the south-side of the default Tier-0/Tier-1 Gateways or other targets reachable via the default Tier-0/Tier-1 Gateways like:&lt;/p>
&lt;ul>
&lt;li>Azure based resources&lt;/li>
&lt;li>On-premises resources via ExpressRoute or VPN&lt;/li>
&lt;li>Internet&lt;/li>
&lt;/ul>
&lt;p>&lt;figure>
&lt;picture>
&lt;img
loading="lazy"
decoding="async"
alt="Traffic flow between VMs in different segments, different T1"
class="image_figure image_internal image_unprocessed"
src="https://vuptime.io/images/avs-3rd-party-nva-nsx/nsxtwith3rdpartyfw-network-flows-north-south-connectivity.png"
/>
&lt;/picture>
&lt;/figure>
&lt;/p>
&lt;h2 id="other-considerations">Other considerations&lt;/h2>
&lt;h3 id="security-recommendations">Security recommendations&lt;/h3>
&lt;p>With multiple routing devices (Tier-1 gateways) deployed behind the NVA, it is important to ensure that the NVA is not bypassed by the traffic. It is recommended to consider blocking &lt;a href="https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol#Redirect">ICMP redirects&lt;/a> at the distributed firewall level and to configure the NVA to:&lt;/p>
&lt;ul>
&lt;li>Ignore ICMP redirects&lt;/li>
&lt;li>Not send ICMP redirects&lt;/li>
&lt;/ul>
&lt;p>Introducing new static routes may also lead to traffic routing bypassing the NVA. It is important to ensure a proper configuration of the static routes in the Tier-1 Gateways.&lt;/p>
&lt;h3 id="nva-high-availability">NVA high availability&lt;/h3>
&lt;p>Here I only demonstrated the capacity to architect and organize traffic flow, to be filtered by a single NVA instance. In a production environment, it is important to consider the high availability of the NVA. This can be achieved by deploying multiple NVA instances and consider VRRP (Virtual Router Redundancy Protocol) grouping and load-balancing to ensure the high availability of the NVA.&lt;/p>
&lt;h3 id="known-limitations">Known limitations&lt;/h3>
&lt;p>A well-known limitation of this design topology is about HCX and the &lt;a href="https://docs.vmware.com/en/VMware-HCX/4.6/hcx-user-guide/GUID-0E254D74-60A9-479C-825D-F373C41F40BC.html">Mobility Optimized Network&lt;/a> (MON) were the behavior can be hard to predict. This is a reason &lt;a href="https://learn.microsoft.com/en-us/azure/cloud-adoption-framework/scenarios/azure-vmware/network-hub-spoke#third-party-nva-integration-in-avs">Mobility Optimized Network is not supported by Microsoft in AVS with a third party NVA setup&lt;/a>.&lt;/p></description></item><item><title>Mock-up Azure VMware Solution in Hub-and-Spoke topology – Part 3</title><link>https://vuptime.io/post/2023-03-07-mockup-avs-in-hub-and-spoke-topology-part3/</link><pubDate>Tue, 07 Mar 2023 00:00:00 +0000</pubDate><guid>https://vuptime.io/post/2023-03-07-mockup-avs-in-hub-and-spoke-topology-part3/</guid><description>
&lt;p>In the previous blog posts (&lt;a href="https://vuptime.io/post/2023-02-22-mockup-avs-in-hub-and-spoke-topology-part1/">part 1&lt;/a> and &lt;a href="https://vuptime.io/post/2023-02-28-mockup-avs-in-hub-and-spoke-topology-part2/">part 2&lt;/a>), we covered the deployment of the basic components of an Hub and Spoke topology including an Azure VMware Solution (AVS) deployment.&lt;/p>
&lt;p>In the first post we deployed and configured a mockup of Hub and Spoke environment. In the second post we connected the AVS environment to an &lt;em>AVS transit vNet&lt;/em> and advertised a default route to the AVS workload. This default route was not yet using our &lt;code>hub-vna&lt;/code> appliance but an appliance deployed in the &lt;code>avs-transit-vnet&lt;/code> to reach out Internet.&lt;/p>
&lt;p>In this step, we will integrate our &lt;code>avs-transit-vnet&lt;/code> within the overall h&amp;amp;s topology and rely on the &lt;code>hub-nva&lt;/code> VM to manage all the required filtering either for:&lt;/p>
&lt;ul>
&lt;li>Spoke-to-spoke&lt;/li>
&lt;li>Spoke-to-On-Premise (and vice versa)&lt;/li>
&lt;li>Internet breakout&lt;/li>
&lt;/ul>
&lt;p>As we want AVS to behave like a spoke, we will apply this rule to the &lt;code>avs-transit-vnet&lt;/code> too.&lt;/p>
&lt;blockquote>
&lt;p>As a reminder, the components and network design described in this blog post are only for demonstration purposes. They are not intended to be used in a production environment and does not represent Azure best practices. They are provided as-is for mock-up and learning purposes only.&lt;/p>&lt;/blockquote>
&lt;h2 id="stage-7--advertise-the-hub-default-routes-to-avs">Stage 7 – Advertise the hub default routes to AVS&lt;/h2>
&lt;p>First thing, we need to add some routes in a new UDR applied to the &lt;code>nva-subnet&lt;/code>. The added routes will ensure that &lt;code>hub-nva&lt;/code> will be able to propagate AVS related traffic through the &lt;code>avs-bgp-vm&lt;/code>. In out lab setup, we do it for 2 prefix:&lt;/p>
&lt;ul>
&lt;li>AVS management: &lt;code>10.100.100.0/22&lt;/code>&lt;/li>
&lt;li>AVS workload: &lt;code>10.100.110.0/24&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>We also need to update the UDR applied to the &lt;code>bgp-subnet&lt;/code> within &lt;code>avs-transit-vnet&lt;/code> to add the default route via the &lt;code>hub-nva&lt;/code> appliance.&lt;/p>
&lt;p>&lt;figure>
&lt;picture>
&lt;img
loading="lazy"
decoding="async"
alt="Advertise the hub default routes to AVS"
class="image_figure image_internal image_unprocessed"
src="https://vuptime.io/images/avs-nva/stage7/hub_and_spoke_avs-Step7.drawio.png"
/>
&lt;/picture>
&lt;/figure>
&lt;/p>
&lt;h3 id="routes-analysis-s7">Routes analysis (s7)&lt;/h3>
&lt;p>We can check the new routes, applicable to the &lt;code>hub-nva&lt;/code> NIC:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="ln"> 1&lt;/span>&lt;span class="cl">az network nic show-effective-route-table &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 2&lt;/span>&lt;span class="cl">&lt;span class="se">&lt;/span> --ids /subscriptions/&amp;lt;sub-id&amp;gt;/resourceGroups/nva-testing-RG/providers/Microsoft.Network/networkInterfaces/hub-nva-nic &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 3&lt;/span>&lt;span class="cl">&lt;span class="se">&lt;/span> -o table
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 4&lt;/span>&lt;span class="cl">Source State Address Prefix Next Hop Type Next Hop IP
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 5&lt;/span>&lt;span class="cl">-------- ------- ---------------- ---------------- -------------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 6&lt;/span>&lt;span class="cl">Default Active 10.100.200.0/24 VnetLocal
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 7&lt;/span>&lt;span class="cl">Default Active 10.100.202.0/24 VNetPeering
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 8&lt;/span>&lt;span class="cl">Default Active 10.100.201.0/24 VNetPeering
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 9&lt;/span>&lt;span class="cl">Default Active 10.100.203.0/24 VNetPeering
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">10&lt;/span>&lt;span class="cl">Default Active 0.0.0.0/0 Internet
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">11&lt;/span>&lt;span class="cl">...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">12&lt;/span>&lt;span class="cl">User Active 10.100.110.0/24 VirtualAppliance 10.100.203.68 &lt;span class="c1"># &amp;lt;--- AVS workload&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">13&lt;/span>&lt;span class="cl">User Active 10.100.100.0/22 VirtualAppliance 10.100.203.68 &lt;span class="c1"># &amp;lt;--- AVS management&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="udr-in-avs-transit-bgp-subnet">UDR in AVS transit &lt;code>bgp-subnet&lt;/code>&lt;/h3>
&lt;p>As we want to rely on &lt;code>hub-nva&lt;/code> for spoke-to-spoke and Internet breakout, we need to change the UDR applied to the &lt;code>bgp-subnet&lt;/code> within &lt;code>avs-transit-vnet&lt;/code> to ensure going through &lt;code>hub-nva&lt;/code>.&lt;/p>
&lt;p>&lt;figure>
&lt;picture>
&lt;img
loading="lazy"
decoding="async"
alt="UDR in AVS transit bgp-subnet"
class="image_figure image_internal image_unprocessed"
src="https://vuptime.io/images/avs-nva/stage7/UDR-on-AVS-transit.png"
/>
&lt;/picture>
&lt;/figure>
&lt;/p>
&lt;p>And the result on effective routes:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="ln"> 1&lt;/span>&lt;span class="cl">az network nic show-effective-route-table &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 2&lt;/span>&lt;span class="cl">&lt;span class="se">&lt;/span> --ids /subscriptions/&amp;lt;sub-id&amp;gt;/resourceGroups/nva-testing-RG/providers/Microsoft.Network/networkInterfaces/avs-bgp-nic &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 3&lt;/span>&lt;span class="cl">&lt;span class="se">&lt;/span> -o table
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 4&lt;/span>&lt;span class="cl">Source State Address Prefix Next Hop Type Next Hop IP
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 5&lt;/span>&lt;span class="cl">--------------------- ------- ----------------- --------------------- -------------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 6&lt;/span>&lt;span class="cl">Default Active 10.100.203.0/24 VnetLocal
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 7&lt;/span>&lt;span class="cl">Default Active 10.100.200.0/24 VNetPeering
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 8&lt;/span>&lt;span class="cl">VirtualNetworkGateway Active 10.100.100.64/26 VirtualNetworkGateway 10.24.132.60
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 9&lt;/span>&lt;span class="cl">VirtualNetworkGateway Active 10.100.109.0/24 VirtualNetworkGateway 10.24.132.60
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">10&lt;/span>&lt;span class="cl">VirtualNetworkGateway Active 10.100.101.0/25 VirtualNetworkGateway 10.24.132.60
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">11&lt;/span>&lt;span class="cl">VirtualNetworkGateway Active 10.100.100.0/26 VirtualNetworkGateway 10.24.132.60
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">12&lt;/span>&lt;span class="cl">VirtualNetworkGateway Active 10.100.110.0/24 VirtualNetworkGateway 10.24.132.60
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">13&lt;/span>&lt;span class="cl">VirtualNetworkGateway Active 10.100.111.0/24 VirtualNetworkGateway 10.24.132.60
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">14&lt;/span>&lt;span class="cl">VirtualNetworkGateway Active 10.100.113.0/24 VirtualNetworkGateway 10.24.132.60
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">15&lt;/span>&lt;span class="cl">VirtualNetworkGateway Active 10.100.114.0/24 VirtualNetworkGateway 10.24.132.60
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">16&lt;/span>&lt;span class="cl">VirtualNetworkGateway Active 10.100.100.192/32 VirtualNetworkGateway 10.24.132.60
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">17&lt;/span>&lt;span class="cl">VirtualNetworkGateway Active 10.100.103.0/26 VirtualNetworkGateway 10.24.132.60
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">18&lt;/span>&lt;span class="cl">VirtualNetworkGateway Active 10.100.101.128/25 VirtualNetworkGateway 10.24.132.60
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">19&lt;/span>&lt;span class="cl">VirtualNetworkGateway Active 10.100.102.0/25 VirtualNetworkGateway 10.24.132.60
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">20&lt;/span>&lt;span class="cl">VirtualNetworkGateway Invalid 0.0.0.0/0 VirtualNetworkGateway 10.100.203.68
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">21&lt;/span>&lt;span class="cl">User Active 0.0.0.0/0 VirtualAppliance 10.100.200.68 &lt;span class="c1"># &amp;lt;--- Default route via hub-nva&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In the last line we can see that the default route is now going by the &lt;code>hub-nva&lt;/code> VM (&lt;code>10.100.200.68&lt;/code>).&lt;/p>
&lt;h3 id="tests-s7">Tests (s7)&lt;/h3>
&lt;p>At this stage, the traffic from and to AVS will go through the &lt;code>hub-nva&lt;/code> and the &lt;code>avs-bgp-vm&lt;/code>. We can easily check this, either by snooping on each routing appliance or by looking at the result of a &lt;code>traceroute&lt;/code> to a spoke VM:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="ln"> 1&lt;/span>&lt;span class="cl">ubuntu@avs-vm-100-10:~$ mtr 10.100.201.4 --report
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 2&lt;/span>&lt;span class="cl">HOST: avs-vm-100-10 Loss% Snt Last Avg Best Wrst StDev
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 3&lt;/span>&lt;span class="cl"> 1.&lt;span class="p">|&lt;/span>-- _gateway 0.0% &lt;span class="m">10&lt;/span> 0.2 0.2 0.1 0.2 0.0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 4&lt;/span>&lt;span class="cl"> 2.&lt;span class="p">|&lt;/span>-- 100.64.176.0 0.0% &lt;span class="m">10&lt;/span> 0.2 0.2 0.2 0.3 0.0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 5&lt;/span>&lt;span class="cl"> 3.&lt;span class="p">|&lt;/span>-- 100.72.18.17 0.0% &lt;span class="m">10&lt;/span> 0.8 0.8 0.7 1.1 0.1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 6&lt;/span>&lt;span class="cl"> 4.&lt;span class="p">|&lt;/span>-- 10.100.100.237 0.0% &lt;span class="m">10&lt;/span> 1.1 1.2 1.1 1.4 0.1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 7&lt;/span>&lt;span class="cl"> 5.&lt;span class="p">|&lt;/span>-- ??? 100.0 &lt;span class="m">10&lt;/span> 0.0 0.0 0.0 0.0 0.0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 8&lt;/span>&lt;span class="cl"> 6.&lt;span class="p">|&lt;/span>-- 10.100.203.68 0.0% &lt;span class="m">10&lt;/span> 3.1 3.1 2.7 5.6 0.9 &lt;span class="c1"># &amp;lt;--- avs-bgp-vm&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 9&lt;/span>&lt;span class="cl"> 7.&lt;span class="p">|&lt;/span>-- 10.100.200.68 0.0% &lt;span class="m">10&lt;/span> 4.5 4.8 3.4 7.6 1.6 &lt;span class="c1"># &amp;lt;--- hub-nva&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">10&lt;/span>&lt;span class="cl"> 8.&lt;span class="p">|&lt;/span>-- 10.100.201.4 0.0% &lt;span class="m">10&lt;/span> 4.1 6.6 4.1 9.3 1.8 &lt;span class="c1"># &amp;lt;--- spoke-vm&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here we can see on &lt;strong>hop 6&lt;/strong> and &lt;strong>7&lt;/strong>, the IP address of &lt;code>avs-bgp-vm&lt;/code> (&lt;code>10.100.203.68&lt;/code>) and &lt;code>hub-nva&lt;/code> (&lt;code>10.100.200.68&lt;/code>). We can reproduce the same behavior with Internet targets.&lt;/p>
&lt;p>&lt;figure>
&lt;picture>
&lt;img
loading="lazy"
decoding="async"
alt="Overview of network flows between a spoke VM and an AVS based VM"
class="image_figure image_internal image_unprocessed"
src="https://vuptime.io/images/avs-nva/stage7/hub_and_spoke_avs-Step7-SymmetricTraffic.drawio.png"
/>
&lt;/picture>
&lt;/figure>
&lt;/p>
&lt;p>Unfortunately, from on premises (VPN) resources, both &lt;code>avs-transit-vnet&lt;/code> and AVS resources are not available as there is no route advertised for those targets.&lt;/p>
&lt;h2 id="stage-8--avs-from-on-premises">Stage 8 – AVS from on-Premises&lt;/h2>
&lt;p>As we discovered in the previous step, our on-premises resources do not have any route advertised to communicate with either &lt;code>avs-transit-vnet&lt;/code> or AVS resources.&lt;/p>
&lt;p>We will mitigate this lack in the current step by adding:&lt;/p>
&lt;ol>
&lt;li>New routes for&lt;code>avs-transit-vnet&lt;/code> and AVS resources in the &lt;code>GatewaySubnet&lt;/code> UDR.
&lt;ul>
&lt;li>To simplify the routes in my lab setup, I advertise the &lt;strong>global prefix&lt;/strong> of my Azure resources (including AVS ones) in a single route: &lt;code>10.100.0.0/16&lt;/code>&lt;/li>
&lt;li>This UDR will be used by the VPN gateway to find a network path to the resources.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>A custom route in the VPN configuration to specify to VPN clients that the network traffic for the target resources should be going through the VPN.
&lt;ul>
&lt;li>As for the UDR, I simplify the custom route announcement in my setup by using a global prefix for all the resources: &lt;code>10.100.0.0/16&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>&lt;figure>
&lt;picture>
&lt;img
loading="lazy"
decoding="async"
alt="Configure connectivity from on-Premises to AVS"
class="image_figure image_internal image_unprocessed"
src="https://vuptime.io/images/avs-nva/stage8/hub_and_spoke_avs-Step8.drawio.png"
/>
&lt;/picture>
&lt;/figure>
&lt;/p>
&lt;h3 id="tests-s8">Tests (s8)&lt;/h3>
&lt;p>From the VPN client, it is easy to see the custom route (&lt;code>10.100.0.0/16&lt;/code>) added to the VPN path:&lt;/p>
&lt;p>And if we check the connectivity from a P2S VPN client with an AVS based VM:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">ubuntu@vpn-client:~$ ping 10.100.110.10 -c3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl">&lt;span class="c1"># output&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl">PING 10.100.110.10 &lt;span class="o">(&lt;/span>10.100.110.10&lt;span class="o">)&lt;/span> 56&lt;span class="o">(&lt;/span>84&lt;span class="o">)&lt;/span> bytes of data.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">4&lt;/span>&lt;span class="cl">&lt;span class="m">64&lt;/span> bytes from 10.100.110.10: &lt;span class="nv">icmp_seq&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1&lt;/span> &lt;span class="nv">ttl&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">57&lt;/span> &lt;span class="nv">time&lt;/span>&lt;span class="o">=&lt;/span>52.3 ms
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">5&lt;/span>&lt;span class="cl">&lt;span class="m">64&lt;/span> bytes from 10.100.110.10: &lt;span class="nv">icmp_seq&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">2&lt;/span> &lt;span class="nv">ttl&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">57&lt;/span> &lt;span class="nv">time&lt;/span>&lt;span class="o">=&lt;/span>30.1 ms
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">6&lt;/span>&lt;span class="cl">&lt;span class="m">64&lt;/span> bytes from 10.100.110.10: &lt;span class="nv">icmp_seq&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">3&lt;/span> &lt;span class="nv">ttl&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">57&lt;/span> &lt;span class="nv">time&lt;/span>&lt;span class="o">=&lt;/span>52.9 ms
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">7&lt;/span>&lt;span class="cl">--- 10.100.110.10 ping statistics ---
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">8&lt;/span>&lt;span class="cl">&lt;span class="m">3&lt;/span> packets transmitted, &lt;span class="m">3&lt;/span> received, 0% packet loss, &lt;span class="nb">time&lt;/span> 2003ms
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">9&lt;/span>&lt;span class="cl">rtt min/avg/max/mdev &lt;span class="o">=&lt;/span> 30.097/45.119/52.947/10.625 ms
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="routes-analysis-s8">Routes analysis (s8)&lt;/h3>
&lt;p>&lt;figure>
&lt;picture>
&lt;img
loading="lazy"
decoding="async"
alt="Overview of network flows between a P2S VN client and an AVS based VM"
class="image_figure image_internal image_unprocessed"
src="https://vuptime.io/images/avs-nva/stage8/onprem-to-avs.drawio.png"
/>
&lt;/picture>
&lt;/figure>
&lt;/p>
&lt;p>In this &lt;strong>on-premises&lt;/strong> to &lt;strong>AVS&lt;/strong> exchange, the following routing components are used:&lt;/p>
&lt;ol>
&lt;li>On VPN client side, the &lt;strong>custom route&lt;/strong> advertises a path for the resources matching the Azure global prefix and/or AVS resources&lt;/li>
&lt;li>The VPN gateway relies on its attached &lt;strong>UDR&lt;/strong> to use the &lt;code>hub-nva&lt;/code> as next hop&lt;/li>
&lt;li>The &lt;code>hub-nva&lt;/code> relies on its &lt;strong>UDR&lt;/strong> to find a path to AVS based resources using the &lt;code>avs-bgp-vm&lt;/code> as a next hop&lt;/li>
&lt;li>The &lt;strong>vNET peering&lt;/strong> enables the communication between resources from &lt;code>hub-vnet&lt;/code> and &lt;code>avs-transit-vnet&lt;/code>&lt;/li>
&lt;li>In the &lt;code>avs-transit-vnet&lt;/code>, the path to AVS resources is directly advertised from the &lt;strong>Express Route Gateway&lt;/strong> linked to AVS and propagating the AVS BGP routes.&lt;/li>
&lt;/ol>
&lt;p>In the opposite direction:&lt;/p>
&lt;ol start="6">
&lt;li>The combination of &lt;code>avs-gbp-vm&lt;/code> and &lt;strong>Azure Route server&lt;/strong> provides a default (&lt;code>0.0.0.0/0&lt;/code>) route for the AVS based workload:
&lt;ul>
&lt;li>6a) The default route is announced over BGP from the &lt;code>avs-transit-vnet&lt;/code>&lt;/li>
&lt;li>6b) The &lt;strong>Azure Route Server&lt;/strong> propagates the route advertisement in the Azure SDN and the route can be advertised to the AVS workload through the &lt;strong>Express Route&lt;/strong> circuit&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>The &lt;strong>vNET peering&lt;/strong> enables the communication between resources from &lt;code>hub-vnet&lt;/code> and &lt;code>avs-transit-vnet&lt;/code>&lt;/li>
&lt;li>In the &lt;code>hub-vnet&lt;/code>, the path to VPN based workload is directly advertised from the &lt;strong>VPN Gateway&lt;/strong>.&lt;/li>
&lt;/ol>
&lt;h2 id="stage-9--azure-server-in-the-hub-vnet">Stage 9 – Azure Server in the hub vNet&lt;/h2>
&lt;p>It is possible to use a combination of the &lt;code>hub-nva&lt;/code> BGP capabilities and &lt;em>Azure Route Server&lt;/em> to advertise network prefixes used in Azure to the VPN &lt;em>Virtual Network Gateway&lt;/em> and avoid maintaining the &lt;em>Route Table&lt;/em> of the &lt;code>GatewaySubnet&lt;/code>.&lt;/p>
&lt;p>Compared to the previous setup, we &lt;strong>removed&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>&lt;em>Custom route&lt;/em> in the VPN configuration&lt;/li>
&lt;li>&lt;em>UDR&lt;/em> attached to the &lt;em>GatewaySubnet&lt;/em>&lt;/li>
&lt;/ul>
&lt;p>And we &lt;strong>added&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>A new &lt;em>Azure Route Server&lt;/em>&lt;/li>
&lt;li>A BGP route advertised from &lt;code>hub-nva&lt;/code> (I used the global Azure Prefix of the lab but this can be more specifics announcements)&lt;/li>
&lt;li>A BGP peering between &lt;code>hub-nva&lt;/code> and the &lt;em>Azure Route Server&lt;/em>&lt;/li>
&lt;/ul>
&lt;p>&lt;figure>
&lt;picture>
&lt;img
loading="lazy"
decoding="async"
alt="Azure Server in the hub vNet"
class="image_figure image_internal image_unprocessed"
src="https://vuptime.io/images/avs-nva/stage9/hub_and_spoke_avs-Step9.drawio.png"
/>
&lt;/picture>
&lt;/figure>
&lt;/p>
&lt;h3 id="routes-analysis-s9">Routes analysis (s9)&lt;/h3>
&lt;p>From &lt;em>Azure Route Server&lt;/em>, we can see that BGP peer is injecting the expected route:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="ln"> 1&lt;/span>&lt;span class="cl">&lt;span class="nv">$routes&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="vm">@&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 2&lt;/span>&lt;span class="cl"> &lt;span class="n">RouteServerName&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s1">&amp;#39;HubRouterServer&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 3&lt;/span>&lt;span class="cl"> &lt;span class="n">ResourceGroupName&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s1">&amp;#39;nva-testing-RG&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 4&lt;/span>&lt;span class="cl"> &lt;span class="n">PeerName&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s1">&amp;#39;hub-rs-bgp-connection&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 5&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 6&lt;/span>&lt;span class="cl">&lt;span class="nb">Get-AzRouteServerPeerLearnedRoute&lt;/span> &lt;span class="nv">@routes&lt;/span> &lt;span class="p">|&lt;/span> &lt;span class="nb">ft
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 7&lt;/span>&lt;span class="cl">&lt;span class="nb">&lt;/span>&lt;span class="c"># output&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 8&lt;/span>&lt;span class="cl">&lt;span class="n">LocalAddress&lt;/span> &lt;span class="n">Network&lt;/span> &lt;span class="n">NextHop&lt;/span> &lt;span class="n">SourcePeer&lt;/span> &lt;span class="n">Origin&lt;/span> &lt;span class="n">AsPath&lt;/span> &lt;span class="n">Weight&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 9&lt;/span>&lt;span class="cl">&lt;span class="p">------------&lt;/span> &lt;span class="p">-------&lt;/span> &lt;span class="p">-------&lt;/span> &lt;span class="p">----------&lt;/span> &lt;span class="p">------&lt;/span> &lt;span class="p">------&lt;/span> &lt;span class="p">------&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">10&lt;/span>&lt;span class="cl">&lt;span class="mf">10.100&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">200&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">36&lt;/span> &lt;span class="mf">10.100&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mf">0&lt;/span>&lt;span class="p">/&lt;/span>&lt;span class="mf">16&lt;/span> &lt;span class="mf">10.100&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">200&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">68&lt;/span> &lt;span class="mf">10.100&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">200&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">68&lt;/span> &lt;span class="n">EBgp&lt;/span> &lt;span class="mf">65001&lt;/span> &lt;span class="mf">32768&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">11&lt;/span>&lt;span class="cl">&lt;span class="mf">10.100&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">200&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">37&lt;/span> &lt;span class="mf">10.100&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mf">0&lt;/span>&lt;span class="p">/&lt;/span>&lt;span class="mf">16&lt;/span> &lt;span class="mf">10.100&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">200&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">68&lt;/span> &lt;span class="mf">10.100&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">200&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">68&lt;/span> &lt;span class="n">EBgp&lt;/span> &lt;span class="mf">65001&lt;/span> &lt;span class="mf">32768&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>From the &lt;em>VPN gateway&lt;/em>, we can also see the advertised routes:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="ln"> 1&lt;/span>&lt;span class="cl">az network vnet-gateway list-learned-routes -n hub-vpn-gateway -g nva-testing-RG -o table
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 2&lt;/span>&lt;span class="cl">&lt;span class="c1"># output&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 3&lt;/span>&lt;span class="cl">Network NextHop Origin SourcePeer AsPath Weight
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 4&lt;/span>&lt;span class="cl">----------------- ------------- -------- ------------- -------- --------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 5&lt;/span>&lt;span class="cl">10.100.200.0/24 Network 10.100.200.5 &lt;span class="m">32768&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 6&lt;/span>&lt;span class="cl">10.100.201.0/24 Network 10.100.200.5 &lt;span class="m">32768&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 7&lt;/span>&lt;span class="cl">10.100.202.0/24 Network 10.100.200.5 &lt;span class="m">32768&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 8&lt;/span>&lt;span class="cl">10.100.204.0/25 Network 10.100.200.5 &lt;span class="m">32768&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 9&lt;/span>&lt;span class="cl">10.100.204.128/25 10.100.200.4 IBgp 10.100.200.4 &lt;span class="m">32768&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">10&lt;/span>&lt;span class="cl">10.100.204.128/25 10.100.200.4 IBgp 10.100.200.36 &lt;span class="m">32768&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">11&lt;/span>&lt;span class="cl">10.100.204.128/25 10.100.200.4 IBgp 10.100.200.37 &lt;span class="m">32768&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">12&lt;/span>&lt;span class="cl">10.100.0.0/16 10.100.200.68 IBgp 10.100.200.36 &lt;span class="m">65001&lt;/span> &lt;span class="m">32768&lt;/span> &lt;span class="c1"># &amp;lt;--- BGP route from hub-nva&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">13&lt;/span>&lt;span class="cl">10.100.0.0/16 10.100.200.68 IBgp 10.100.200.37 &lt;span class="m">65001&lt;/span> &lt;span class="m">32768&lt;/span> &lt;span class="c1"># &amp;lt;--- BGP route from hub-nva&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">14&lt;/span>&lt;span class="cl">10.100.200.0/24 Network 10.100.200.4 &lt;span class="m">32768&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">15&lt;/span>&lt;span class="cl">10.100.201.0/24 Network 10.100.200.4 &lt;span class="m">32768&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">16&lt;/span>&lt;span class="cl">10.100.202.0/24 Network 10.100.200.4 &lt;span class="m">32768&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">17&lt;/span>&lt;span class="cl">10.100.204.128/25 Network 10.100.200.4 &lt;span class="m">32768&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">18&lt;/span>&lt;span class="cl">10.100.204.0/25 10.100.200.5 IBgp 10.100.200.5 &lt;span class="m">32768&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">19&lt;/span>&lt;span class="cl">10.100.204.0/25 10.100.200.5 IBgp 10.100.200.36 &lt;span class="m">32768&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">20&lt;/span>&lt;span class="cl">10.100.204.0/25 10.100.200.5 IBgp 10.100.200.37 &lt;span class="m">32768&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">21&lt;/span>&lt;span class="cl">10.100.0.0/16 10.100.200.68 IBgp 10.100.200.36 &lt;span class="m">65001&lt;/span> &lt;span class="m">32768&lt;/span> &lt;span class="c1"># &amp;lt;--- BGP route from hub-nva&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">22&lt;/span>&lt;span class="cl">10.100.0.0/16 10.100.200.68 IBgp 10.100.200.37 &lt;span class="m">65001&lt;/span> &lt;span class="m">32768&lt;/span> &lt;span class="c1"># &amp;lt;--- BGP route from hub-nva&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And from the VPN client, the route is also available among the ones from vNET peerings:&lt;/p>
&lt;p>&lt;figure>
&lt;picture>
&lt;img
loading="lazy"
decoding="async"
alt="Routes from VPN client"
class="image_figure image_internal image_unprocessed"
src="https://vuptime.io/images/avs-nva/stage9/RoutesFromVPNClient.png"
/>
&lt;/picture>
&lt;/figure>
&lt;/p>
&lt;h3 id="tests-s9">Tests (s9)&lt;/h3>
&lt;p>When reaching an AVS based VM from a VPN client we can see the components of our topology:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="ln"> 1&lt;/span>&lt;span class="cl">ubuntu@vpn-client:~$ mtr 10.100.110.10 -r
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 2&lt;/span>&lt;span class="cl">&lt;span class="c1"># output&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 3&lt;/span>&lt;span class="cl">Start: 2023-02-09T17:21:35+0100
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 4&lt;/span>&lt;span class="cl">HOST: vpn-client Loss% Snt Last Avg Best Wrst StDev
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 5&lt;/span>&lt;span class="cl"> 1.&lt;span class="p">|&lt;/span>-- vpn-client 0.0% &lt;span class="m">10&lt;/span> 0.5 0.5 0.3 1.0 0.3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 6&lt;/span>&lt;span class="cl"> 2.&lt;span class="p">|&lt;/span>-- 10.100.200.68 0.0% &lt;span class="m">10&lt;/span> 21.0 53.3 20.6 307.4 89.7
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 7&lt;/span>&lt;span class="cl"> 3.&lt;span class="p">|&lt;/span>-- 10.100.203.68 0.0% &lt;span class="m">10&lt;/span> 25.4 44.5 21.6 207.4 57.8
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 8&lt;/span>&lt;span class="cl"> 4.&lt;span class="p">|&lt;/span>-- 10.100.203.4 0.0% &lt;span class="m">10&lt;/span> 36.0 42.4 21.9 120.7 29.9
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 9&lt;/span>&lt;span class="cl"> 5.&lt;span class="p">|&lt;/span>-- 10.100.100.233 0.0% &lt;span class="m">10&lt;/span> 54.0 32.0 23.8 59.9 13.5
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">10&lt;/span>&lt;span class="cl"> 6.&lt;span class="p">|&lt;/span>-- 10.100.100.65 0.0% &lt;span class="m">10&lt;/span> 49.3 39.8 24.6 55.8 12.5
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">11&lt;/span>&lt;span class="cl"> 7.&lt;span class="p">|&lt;/span>-- ??? 100.0 &lt;span class="m">10&lt;/span> 0.0 0.0 0.0 0.0 0.0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">12&lt;/span>&lt;span class="cl"> 8.&lt;span class="p">|&lt;/span>-- ??? 100.0 &lt;span class="m">10&lt;/span> 0.0 0.0 0.0 0.0 0.0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">13&lt;/span>&lt;span class="cl"> 9.&lt;span class="p">|&lt;/span>-- 10.100.110.10 0.0% &lt;span class="m">10&lt;/span> 60.5 37.4 22.7 64.9 18.2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>I matched the hop numbers of &lt;code>mtr&lt;/code> trace in the following diagram (considering a set of hops are part of the AVS network stack and not documented here):&lt;/p>
&lt;p>&lt;figure>
&lt;picture>
&lt;img
loading="lazy"
decoding="async"
alt="Diagram of routing hops shown in the mtr network tool trace"
class="image_figure image_internal image_unprocessed"
src="https://vuptime.io/images/avs-nva/stage9/onprem-to-avs.drawio.png"
/>
&lt;/picture>
&lt;/figure>
&lt;/p>
&lt;h3 id="additional-information-about-avs-connectivity-with-azure-route-server">Additional information about AVS connectivity with Azure Route Server&lt;/h3>
&lt;p>If you need to learn more about Azure Route Server, I strongly recommend you to read the following posts:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://blog.cloudtrooper.net/2022/02/06/azure-route-server-to-encap-or-not-to-encap-that-is-the-question/">Azure Route Server: to encap or not to encap, that is the question&lt;/a> and &lt;a href="https://blog.cloudtrooper.net/2022/05/02/azure-firewalls-sidekick-to-join-the-bgp-superheroes/">Azure Firewall’s sidekick to join the BGP superheroes&lt;/a> by Jose Moreno&lt;/li>
&lt;li>&lt;a href="https://github.com/cynthiatreger/az-routing-guide-ep5-nva-routing-2-0">NVA Routing 2.0 with Azure Route Server, VxLAN (or IPSec) &amp;amp; BGP&lt;/a> by Cynthia Treger&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/en-us/azure/route-server/overview">Azure Route Server&lt;/a> in Azure documentation&lt;/li>
&lt;/ul>
&lt;h2 id="part-3--conclusion">Part 3 – Conclusion&lt;/h2>
&lt;p>In the last 3 posts of this series we covered a lot of topics related to Azure networking in the context of adopting a &lt;em>Hub &amp;amp; Spokes&lt;/em> topology with an Azure VMware Solution deployment.&lt;/p>
&lt;p>We created this mockup setup step-by-step to demonstrate the capabilities of some Azure products (like Azure Route Server) and features (like route propagation in UDRs).&lt;/p>
&lt;p>In the last step we have a working setup with a central &lt;code>hub-nva&lt;/code> VM able to route and filter traffic from/to the AVS environment, spokes vNets, and the on-premises resources.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note&lt;/strong>: the setup described in this post is not meant to be used in production due to the lack of high availability and redundancy of the components. It is just a mockup to demonstrate the capabilities of Azure networking products and features.&lt;/p>&lt;/blockquote>
&lt;p>I hope you enjoyed this series and learned something new about Azure networking. There will probably be more posts to extend this series in the future with new topics and use cases like:&lt;/p>
&lt;ul>
&lt;li>High availability and redundancy of the components&lt;/li>
&lt;li>Dynamic routing with BGP between the &lt;code>hub-nva&lt;/code> and the &lt;code>avs-spoke-nva&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>See you in the next posts!&lt;/p></description></item><item><title>Mock-up Azure VMware Solution in Hub-and-Spoke topology – Part 2</title><link>https://vuptime.io/post/2023-02-28-mockup-avs-in-hub-and-spoke-topology-part2/</link><pubDate>Tue, 28 Feb 2023 00:00:00 +0000</pubDate><guid>https://vuptime.io/post/2023-02-28-mockup-avs-in-hub-and-spoke-topology-part2/</guid><description>
&lt;p>In the &lt;a href="https://vuptime.io/post/2023-02-22-mockup-avs-in-hub-and-spoke-topology-part1/">previous blog post&lt;/a>, we have seen how to deploy a basic environment to start mocking-up an Azure VMware Solution (AVS) environment in a hub and spoke topology. In the &lt;a href="https://vuptime.io/post/2023-02-22-mockup-avs-in-hub-and-spoke-topology-part1/#stage-3--user-defined-route-on-spokes--gw-propagation-false">last section&lt;/a>, we discovered a glitch-in-the-Matrix when we lookup for the traffic between VPN and spoke VMs. We will see in this blog post &lt;a href="https://vuptime.io/post/2023-02-28-mockup-avs-in-hub-and-spoke-topology-part2/#stage-4--user-defined-routes-on-gatewaysubnet">how to fix this issue&lt;/a>.&lt;/p>
&lt;p>We will also &lt;a href="https://vuptime.io/post/2023-02-28-mockup-avs-in-hub-and-spoke-topology-part2/#stage-5--introduction-of-an-avs-transit-vnet">introduce the first components of an AVS transit vNet&lt;/a> to land the Express Route circuit from an AVS deployment and &lt;a href="https://vuptime.io/post/2023-02-28-mockup-avs-in-hub-and-spoke-topology-part2/#stage-6--advertise-a-default-routes-to-avs">how to inject a default BGP route to VMware workloads&lt;/a>.&lt;/p>
&lt;blockquote>
&lt;p>As a reminder, the components and network design described in this blog post are only for demonstration purposes. They are not intended to be used in a production environment and does not represent Azure best practices. They are provided as-is for mock-up and learning purposes only.&lt;/p>&lt;/blockquote>
&lt;p>Please refer to &lt;a href="https://vuptime.io/post/2023-02-22-mockup-avs-in-hub-and-spoke-topology-part1/">part 1&lt;/a> to get details about the lab environment and the 3 first steps we already covered.&lt;/p>
&lt;h2 id="stage-4--user-defined-routes-on-gatewaysubnet">Stage 4 – User Defined Routes on GatewaySubnet&lt;/h2>
&lt;p>In order to &lt;strong>mitigate the asymmetric routing issue&lt;/strong>, we will add a User Defined Routes to the &lt;code>GatewaySubnet&lt;/code> to ensure that the traffic incoming from the VPN client will be routed to the NVA appliance.&lt;/p>
&lt;p>&lt;figure>
&lt;picture>
&lt;img
loading="lazy"
decoding="async"
alt="User Defined Routes on GatewaySubnet"
class="image_figure image_internal image_unprocessed"
src="https://vuptime.io/images/avs-nva/stage4/hub_and_spoke_avs-Step4.drawio.png"
/>
&lt;/picture>
&lt;/figure>
&lt;/p>
&lt;p>The User Defined Route (UDR) on &lt;code>GatewaySubnet&lt;/code> will configured as below:&lt;/p>
&lt;ul>
&lt;li>10.100.201.0/24 (aka &lt;code>spoke1-vnet&lt;/code>) via &lt;code>nva-vm.nic[0].ipaddress&lt;/code>&lt;/li>
&lt;li>10.100.202.0/24 (aka &lt;code>spoke2-vnet&lt;/code>) via &lt;code>nva-vm.nic[0].ipaddress&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>In Azure Portal, it looks like this:&lt;/p>
&lt;p>&lt;figure>
&lt;picture>
&lt;img
loading="lazy"
decoding="async"
alt="User Defined Routes on GatewaySubnet"
class="image_figure image_internal image_unprocessed"
src="https://vuptime.io/images/avs-nva/stage4/UserDefinedRoute_GatewaySubnet.png"
/>
&lt;/picture>
&lt;/figure>
&lt;/p>
&lt;blockquote>
&lt;p>Of course, depending on the used IP address plan, it is possible to simplify and group multiple routes under a common prefix.&lt;/p>&lt;/blockquote>
&lt;h3 id="routes-analysis-s4">Routes analysis (s4)&lt;/h3>
&lt;p>From this point we can see that both VPN-client-to-spokes and spokes-to-VPN-destinations, passing through the &lt;code>hub-nva&lt;/code> appliance:&lt;/p>
&lt;p>&lt;figure>
&lt;picture>
&lt;img
loading="lazy"
decoding="async"
alt="Routes analysis with symmetric traffic"
class="image_figure image_internal image_unprocessed"
src="https://vuptime.io/images/avs-nva/stage4/hub_and_spoke_avs-Step4-SymmetricTraffic.drawio.png"
/>
&lt;/picture>
&lt;/figure>
&lt;/p>
&lt;p>Example: During a ping session from a VPN client to &lt;code>spoke-1-vm&lt;/code>, we can only see both echo &lt;em>request&lt;/em> and echo &lt;em>reply&lt;/em> going through the &lt;code>hub-nva&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">ubuntu@hub-nva:~$ sudo tcpdump -nni eth0 icmp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl">&lt;span class="c1"># output&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl">IP 10.100.204.2 &amp;gt; 10.100.201.4: ICMP &lt;span class="nb">echo&lt;/span> request, id 1002, seq 1, length &lt;span class="m">64&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">4&lt;/span>&lt;span class="cl">IP 10.100.200.68 &amp;gt; 10.100.201.4: ICMP &lt;span class="nb">echo&lt;/span> request, id 1002, seq 1, length &lt;span class="m">64&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">5&lt;/span>&lt;span class="cl">IP 10.100.201.4 &amp;gt; 10.100.200.68: ICMP &lt;span class="nb">echo&lt;/span> reply, id 1002, seq 1, length &lt;span class="m">64&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">6&lt;/span>&lt;span class="cl">IP 10.100.201.4 &amp;gt; 10.100.204.2: ICMP &lt;span class="nb">echo&lt;/span> reply, id 1002, seq 1, length &lt;span class="m">64&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>All the network traffic is now passing through the &lt;code>hub-nva&lt;/code>. Meaning that we fixed the asymmetric routing issue.&lt;/p>
&lt;h3 id="additional-information-about-azure-udr">Additional information about Azure UDR&lt;/h3>
&lt;p>If you need to learn more about UDR in Azure, I strongly recommend you to read the following posts:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://learn.microsoft.com/en-us/azure/virtual-network/virtual-networks-udr-overview#user-defined">User Defined Routes&lt;/a> in Azure documentation&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/en-us/azure/virtual-network/virtual-networks-udr-overview#how-azure-selects-a-route">How Azure selects a route&lt;/a> in Azure documentation&lt;/li>
&lt;li>&lt;a href="https://blog.cloudtrooper.net/2020/11/28/dont-let-your-azure-routes-bite-you/">Don’t let your Azure Routes bite you&lt;/a> by Jose Moreno&lt;/li>
&lt;/ul>
&lt;h2 id="stage-5--introduction-of-an-avs-transit-vnet">Stage 5 – Introduction of an AVS transit vNet&lt;/h2>
&lt;p>Azure VMware Solution (AVS) is provided with an external connectivity based on Express Route Circuit. This requires to 'land' the Express Route circuit out of the AVS environment. The most common way to do this is to map the AVS Express Route circuit to an existing On Premises Express Route circuit and to rely on &lt;a href="https://learn.microsoft.com/en-us/azure/expressroute/expressroute-global-reach">Express Route Global Reach for providing the connectivity between the two circuits&lt;/a>: transitive connectivity.&lt;/p>
&lt;p>But this setup will not provide a way to consider the AVS deployment as a spoke in a hub-and-spoke topology, as the network traffic between AVS and On Premises, will bypass the &lt;code>hub-nva&lt;/code>. In order to fix this situation, we will introduce a &lt;em>transit vNet&lt;/em> to land the Express Route circuit from the AVS deployment and to ensure that the traffic between AVS and On Premises will be routed through the &lt;code>hub-nva&lt;/code>.&lt;/p>
&lt;p>In this &lt;code>avs-transit-vnet&lt;/code>, we will need an Express Route Gateway to land the Express Route circuit from the AVS deployment.&lt;/p>
&lt;p>&lt;figure>
&lt;picture>
&lt;img
loading="lazy"
decoding="async"
alt="Introduction of an AVS transit vNet"
class="image_figure image_internal image_unprocessed"
src="https://vuptime.io/images/avs-nva/stage5/hub_and_spoke_avs-Step5.drawio.png"
/>
&lt;/picture>
&lt;/figure>
&lt;/p>
&lt;h3 id="routes-analysis-s5">Routes analysis (s5)&lt;/h3>
&lt;p>When the creation of the vNet is completed and the connection of AVS ER circuit setup, we could look at effective routes to see if there is any chance to communicate with AVS based VMs at this stage:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="ln"> 1&lt;/span>&lt;span class="cl">az network nic show-effective-route-table &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 2&lt;/span>&lt;span class="cl">&lt;span class="se">&lt;/span> --ids /subscriptions/&amp;lt;sub-id&amp;gt;/resourceGroups/nva-testing-RG/providers/Microsoft.Network/networkInterfaces/hub-nva-nic &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 3&lt;/span>&lt;span class="cl">&lt;span class="se">&lt;/span> -o table
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 4&lt;/span>&lt;span class="cl">&lt;span class="c1"># output&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 5&lt;/span>&lt;span class="cl">Source State Address Prefix Next Hop Type Next Hop IP
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 6&lt;/span>&lt;span class="cl">--------------------- ------- ---------------- --------------------- -------------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 7&lt;/span>&lt;span class="cl">Default Active 10.100.200.0/24 VnetLocal
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 8&lt;/span>&lt;span class="cl">Default Active 10.100.202.0/24 VNetPeering
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 9&lt;/span>&lt;span class="cl">Default Active 10.100.201.0/24 VNetPeering
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">10&lt;/span>&lt;span class="cl">Default Active 10.100.203.0/24 VNetPeering
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">11&lt;/span>&lt;span class="cl">VirtualNetworkGateway Active 10.100.204.0/24 VirtualNetworkGateway 20.160.147.74
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And, of course, if there is no route, there is no connectivity:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">ubuntu@hub-nva:~$ ping 10.100.100.2 -c3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl">&lt;span class="c1"># output&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl">PING 10.100.100.2 &lt;span class="o">(&lt;/span>10.100.100.2&lt;span class="o">)&lt;/span> 56&lt;span class="o">(&lt;/span>84&lt;span class="o">)&lt;/span> bytes of data.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">4&lt;/span>&lt;span class="cl">--- 10.100.100.2 ping statistics ---
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">5&lt;/span>&lt;span class="cl">&lt;span class="m">3&lt;/span> packets transmitted, &lt;span class="m">0&lt;/span> received, 100% packet loss, &lt;span class="nb">time&lt;/span> 2029ms
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Depending on &lt;strong>AVS connectivity settings&lt;/strong>, if we rely on routes announced from the Express Route connection to reach Internet or other Azure resources: we cannot communicate with resources out of AVS due to the lack of announced routes.&lt;/p>
&lt;h3 id="additional-information-about-avs-connectivity">Additional information about AVS connectivity&lt;/h3>
&lt;p>If you need to learn more about AVS connectivity, I strongly recommend you to read the following posts:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://learn.microsoft.com/en-us/azure/azure-vmware/concepts-networking">Azure VMware Solution networking and interconnectivity concepts&lt;/a> in Azure documentation&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/en-us/azure/azure-vmware/concepts-network-design-considerations">Azure VMware Solution network design considerations&lt;/a> in Azure documentation&lt;/li>
&lt;li>&lt;a href="https://blog.cloudtrooper.net/2022/05/16/azure-vmware-solution-networking-voodoo/">Azure VMware Solution networking voodoo&lt;/a> by Jose Moreno&lt;/li>
&lt;/ul>
&lt;h2 id="stage-6--advertise-a-default-routes-to-avs">Stage 6 – Advertise a default routes to AVS&lt;/h2>
&lt;p>In the current stage, we will introduce a default route (0.0.0.0/0) announcement to AVS. According to the leitmotif of this blog post series, we will go step by step and we will start with the simplest solution: a default route announced from the &lt;code>avs-transit-vnet&lt;/code> to AVS. And we will temporarily ignore the previous components of our hub-and-spoke topology.&lt;/p>
&lt;p>Firstly, we will need some extra components added to our &lt;em>AVS transit&lt;/em> topology:&lt;/p>
&lt;ul>
&lt;li>VM, &lt;code>avs-bgp-vm&lt;/code> to:
&lt;ul>
&lt;li>Initiate the BGP route announcement&lt;/li>
&lt;li>Route the traffic incoming from AVS&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>An &lt;em>Azure Route Server&lt;/em> (ARS) to propagate the route announcements in the Azure SDN
&lt;ul>
&lt;li>This ARS component will be peered with the &lt;code>avs-bgp-vm&lt;/code> and will provide routes incoming from this BGP peer, to AVS, through the &lt;em>Virtual Network Gateway&lt;/em>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>A &lt;em>Route Table&lt;/em> (UDR) to override the default route advertised by the &lt;code>avs-bgp-vm&lt;/code>. Otherwise, the VM advertises itself as the default route for the whole vNET and will keep sending the Internet-bound traffic, &lt;a href="https://learn.microsoft.com/en-us/azure/route-server/troubleshoot-route-server#why-does-my-nva-lose-internet-connectivity-after-it-advertises-the-default-route-00000-to-azure-route-server">including the one sent by the VM back to the VM itself&lt;/a>.&lt;/li>
&lt;/ul>
&lt;p>&lt;figure>
&lt;picture>
&lt;img
loading="lazy"
decoding="async"
alt="Advertise a default routes to AVS"
class="image_figure image_internal image_unprocessed"
src="https://vuptime.io/images/avs-nva/stage6/hub_and_spoke_avs-Step6.drawio.png"
/>
&lt;/picture>
&lt;/figure>
&lt;/p>
&lt;blockquote>
&lt;p>As mentioned earlier, this is a first and temporary step. Validating this setup where the Internet breakout is made in the &lt;code>avs-transit-vnet&lt;/code> for the AVS deployment will help to understand and prepare for the next steps.&lt;/p>&lt;/blockquote>
&lt;h3 id="avs-internet-connectivity-settings">AVS Internet connectivity settings&lt;/h3>
&lt;p>Azure VMware Solution provides three options for Internet connectivity:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://learn.microsoft.com/en-us/azure/azure-vmware/concepts-design-public-internet-access#azure-vmware-solution-managed-snat">Microsoft-managed SNAT&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/en-us/azure/azure-vmware/concepts-design-public-internet-access#azure-public-ipv4-address-to-nsx-t-data-center-edge">Public IP addresses down to the NSX-T edges&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/en-us/azure/azure-vmware/concepts-design-public-internet-access#internet-service-hosted-in-azure">Customized Internet connectivity through the Express Route circuit routes announcements&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>In this blog post series, we will consider that AVS is configured to get its &lt;a href="https://learn.microsoft.com/en-us/azure/azure-vmware/concepts-design-public-internet-access#internet-service-hosted-in-azure">Internet connectivity from a default route announced through the Express Route circuit&lt;/a>.&lt;/p>
&lt;p>&lt;figure>
&lt;picture>
&lt;img
loading="lazy"
decoding="async"
alt="AVS Internet connectivity settings"
class="image_figure image_internal image_unprocessed"
src="https://vuptime.io/images/avs-nva/stage6/avs-internet-connectivity-settings.png"
/>
&lt;/picture>
&lt;/figure>
&lt;/p>
&lt;h3 id="routes-analysis-s6">Routes analysis (s6)&lt;/h3>
&lt;p>When the creation of the new components and connections is completed, we could look at effective routes to see the result:&lt;/p>
&lt;p>From the deployed &lt;em>Azure Route Server&lt;/em>, we can see the BGP peer:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">az network routeserver peering show -g nva-testing-RG &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl">&lt;span class="se">&lt;/span> -n avs-rs-bgp-connection --routeserver AVSTransitRouterServer &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl">&lt;span class="se">&lt;/span> -o table
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">4&lt;/span>&lt;span class="cl">&lt;span class="c1"># output&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">5&lt;/span>&lt;span class="cl">Name PeerAsn PeerIp ProvisioningState ResourceGroup
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">6&lt;/span>&lt;span class="cl">--------------------- --------- ------------- ------------------- ---------------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">7&lt;/span>&lt;span class="cl">avs-rs-bgp-connection &lt;span class="m">65002&lt;/span> 10.100.203.68 Succeeded nva-testing-RG
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And we &lt;strong>should&lt;/strong> see the learned route, advertised by the BGP peer:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">az network routeserver peering list-learned-routes &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl">&lt;span class="se">&lt;/span> -g nva-testing-RG -n avs-rs-bgp-connection &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl">&lt;span class="se">&lt;/span> --routeserver AVSTransitRouterServer -o table
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">4&lt;/span>&lt;span class="cl">&lt;span class="c1"># output&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">5&lt;/span>&lt;span class="cl">Issue: no route displayed there!
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="notices warning">
&lt;div class="label">Issue: no route displayed there&lt;/div>
&lt;p>The &lt;code>list-learned-routes&lt;/code> command does not work as expected. The issue is currently under investigation.
In the meantime, we will use the PowerShell command &lt;code>Get-AzRouteServerPeerLearnedRoute&lt;/code> to display the routes.&lt;/p>
&lt;/div>
&lt;p>Using PowerShell, the advertised routes are displayed:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="ln"> 1&lt;/span>&lt;span class="cl">&lt;span class="nv">$routes&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="vm">@&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 2&lt;/span>&lt;span class="cl"> &lt;span class="n">RouteServerName&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s1">&amp;#39;AVSTransitRouterServer&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 3&lt;/span>&lt;span class="cl"> &lt;span class="n">ResourceGroupName&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s1">&amp;#39;nva-testing-RG&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 4&lt;/span>&lt;span class="cl"> &lt;span class="n">PeerName&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s1">&amp;#39;avs-rs-bgp-connection&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 5&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 6&lt;/span>&lt;span class="cl">&lt;span class="nb">Get-AzRouteServerPeerLearnedRoute&lt;/span> &lt;span class="nv">@routes&lt;/span> &lt;span class="p">|&lt;/span> &lt;span class="nb">ft
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 7&lt;/span>&lt;span class="cl">&lt;span class="nb">&lt;/span>&lt;span class="n">LocalAddress&lt;/span> &lt;span class="n">Network&lt;/span> &lt;span class="n">NextHop&lt;/span> &lt;span class="n">SourcePeer&lt;/span> &lt;span class="n">Origin&lt;/span> &lt;span class="n">AsPath&lt;/span> &lt;span class="n">Weight&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 8&lt;/span>&lt;span class="cl">&lt;span class="p">------------&lt;/span> &lt;span class="p">-------&lt;/span> &lt;span class="p">-------&lt;/span> &lt;span class="p">----------&lt;/span> &lt;span class="p">------&lt;/span> &lt;span class="p">------&lt;/span> &lt;span class="p">------&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 9&lt;/span>&lt;span class="cl">&lt;span class="mf">10.100&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">203&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">36&lt;/span> &lt;span class="mf">0.0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mf">0&lt;/span>&lt;span class="p">/&lt;/span>&lt;span class="mf">0&lt;/span> &lt;span class="mf">10.100&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">203&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">68&lt;/span> &lt;span class="mf">10.100&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">203&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">68&lt;/span> &lt;span class="n">EBgp&lt;/span> &lt;span class="mf">65002&lt;/span> &lt;span class="mf">32768&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">10&lt;/span>&lt;span class="cl">&lt;span class="mf">10.100&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">203&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">37&lt;/span> &lt;span class="mf">0.0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mf">0&lt;/span>&lt;span class="p">/&lt;/span>&lt;span class="mf">0&lt;/span> &lt;span class="mf">10.100&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">203&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">68&lt;/span> &lt;span class="mf">10.100&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">203&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">68&lt;/span> &lt;span class="n">EBgp&lt;/span> &lt;span class="mf">65002&lt;/span> &lt;span class="mf">32768&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We can see that the &lt;code>avs-bgp-vm&lt;/code> is advertising itself as the next hop for the default route. This is the expected behavior.&lt;/p>
&lt;h3 id="tests-s6">Tests (s6)&lt;/h3>
&lt;p>From a VM hosted in AVS, we can now reach Internet, by going through the &lt;code>avs-bgp-vm&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="ln"> 1&lt;/span>&lt;span class="cl">ubuntu@avs-vm-100-10:~$ mtr 1.1.1.1 --report
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 2&lt;/span>&lt;span class="cl">HOST: avs-vm-100-10 Loss% Snt Last Avg Best Wrst StDev
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 3&lt;/span>&lt;span class="cl"> 1.&lt;span class="p">|&lt;/span>-- _gateway 0.0% &lt;span class="m">10&lt;/span> 0.1 0.2 0.1 0.2 0.0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 4&lt;/span>&lt;span class="cl"> 2.&lt;span class="p">|&lt;/span>-- 100.64.176.0 0.0% &lt;span class="m">10&lt;/span> 0.2 0.3 0.2 0.3 0.0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 5&lt;/span>&lt;span class="cl"> 3.&lt;span class="p">|&lt;/span>-- 100.72.18.17 0.0% &lt;span class="m">10&lt;/span> 0.9 0.8 0.7 0.9 0.1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 6&lt;/span>&lt;span class="cl"> 4.&lt;span class="p">|&lt;/span>-- 10.100.100.233 0.0% &lt;span class="m">10&lt;/span> 1.0 1.0 0.9 1.1 0.1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 7&lt;/span>&lt;span class="cl"> 5.&lt;span class="p">|&lt;/span>-- ??? 100.0 &lt;span class="m">10&lt;/span> 0.0 0.0 0.0 0.0 0.0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 8&lt;/span>&lt;span class="cl"> 6.&lt;span class="p">|&lt;/span>-- 10.100.203.68 0.0% &lt;span class="m">10&lt;/span> 3.2 4.0 2.6 7.3 2.0 &lt;span class="c1"># &amp;lt;--- avs-bgp-vm&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 9&lt;/span>&lt;span class="cl"> 7.&lt;span class="p">|&lt;/span>-- ??? 100.0 &lt;span class="m">10&lt;/span> 0.0 0.0 0.0 0.0 0.0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">10&lt;/span>&lt;span class="cl"> 8.&lt;span class="p">|&lt;/span>-- ??? 100.0 &lt;span class="m">10&lt;/span> 0.0 0.0 0.0 0.0 0.0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">11&lt;/span>&lt;span class="cl"> 9.&lt;span class="p">|&lt;/span>-- ??? 100.0 &lt;span class="m">10&lt;/span> 0.0 0.0 0.0 0.0 0.0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">12&lt;/span>&lt;span class="cl"> 10.&lt;span class="p">|&lt;/span>-- ??? 100.0 &lt;span class="m">10&lt;/span> 0.0 0.0 0.0 0.0 0.0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">13&lt;/span>&lt;span class="cl"> 11.&lt;span class="p">|&lt;/span>-- ??? 100.0 &lt;span class="m">10&lt;/span> 0.0 0.0 0.0 0.0 0.0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">14&lt;/span>&lt;span class="cl"> 12.&lt;span class="p">|&lt;/span>-- ??? 100.0 &lt;span class="m">10&lt;/span> 0.0 0.0 0.0 0.0 0.0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">15&lt;/span>&lt;span class="cl"> 13.&lt;span class="p">|&lt;/span>-- ??? 100.0 &lt;span class="m">10&lt;/span> 0.0 0.0 0.0 0.0 0.0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">16&lt;/span>&lt;span class="cl"> 14.&lt;span class="p">|&lt;/span>-- ??? 100.0 &lt;span class="m">10&lt;/span> 0.0 0.0 0.0 0.0 0.0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">17&lt;/span>&lt;span class="cl"> 15.&lt;span class="p">|&lt;/span>-- ??? 100.0 &lt;span class="m">10&lt;/span> 0.0 0.0 0.0 0.0 0.0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">18&lt;/span>&lt;span class="cl"> 16.&lt;span class="p">|&lt;/span>-- ??? 100.0 &lt;span class="m">10&lt;/span> 0.0 0.0 0.0 0.0 0.0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">19&lt;/span>&lt;span class="cl"> 17.&lt;span class="p">|&lt;/span>-- ??? 100.0 &lt;span class="m">10&lt;/span> 0.0 0.0 0.0 0.0 0.0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">20&lt;/span>&lt;span class="cl"> 18.&lt;span class="p">|&lt;/span>-- one.one.one.one 0.0% &lt;span class="m">10&lt;/span> 5.7 4.9 3.9 9.6 1.7
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In previous route-tracing report, &lt;code>10.100.203.68&lt;/code> is the IP of &lt;code>avs-bgp-vm&lt;/code>, acting like a router or NVA, as expected for this scenario.&lt;/p>
&lt;p>But obviously, this is not the behavior of a standard spoke for the rest of the h&amp;amp;s topology. This step was only there to prepare some of the components we will need further.&lt;/p>
&lt;h3 id="additional-information-about-avs-connectivity-with-azure-route-server">Additional information about AVS connectivity with Azure Route Server&lt;/h3>
&lt;p>If you need to learn more about AVS connectivity with Azure Route Server in Azure, I strongly recommend you to read the following posts:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://learn.microsoft.com/en-us/azure/route-server/vmware-solution-default-route">Injecting routes to Azure VMware Solution with Azure Route Server&lt;/a> in Azure documentation&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/en-us/azure/cloud-adoption-framework/scenarios/azure-vmware/eslz-network-topology-connectivity">Network Virtual Appliance in Azure Virtual Network to inspect all network traffic&lt;/a> in Azure documentation&lt;/li>
&lt;/ul>
&lt;h2 id="part-2--conclusion">Part 2 – Conclusion&lt;/h2>
&lt;p>In this second part, we have seen how to mitigate the asymmetric routing issue by configuring a new &lt;em>Route Table&lt;/em> applicable to VPN Gateway and we created the network components to advertise BGP routes to the &lt;em>Azure VMware Solution&lt;/em> deployment with the help of &lt;em>Azure Route Server&lt;/em>.&lt;/p>
&lt;p>In the next (and probably last) part, we will see how to configure this AVS transit topology as a normal spoke in the hub and spoke topology. We will also cover a simplification of the On-Premises connectivity configuration, relying on &lt;em>Azure Route Server&lt;/em>.&lt;/p></description></item><item><title>Mock-up Azure VMware Solution in Hub-and-Spoke topology – Part 1</title><link>https://vuptime.io/post/2023-02-22-mockup-avs-in-hub-and-spoke-topology-part1/</link><pubDate>Wed, 22 Feb 2023 00:00:00 +0000</pubDate><guid>https://vuptime.io/post/2023-02-22-mockup-avs-in-hub-and-spoke-topology-part1/</guid><description>
&lt;p>If you are using &lt;a href="https://vuptime.io/tags/azure-vmware-solution/">Azure VMware Solution&lt;/a> to run your VMware workloads on Azure, you might wonder how to connect it with other Azure resources in a secure and efficient way. One option is to use a &lt;a href="https://learn.microsoft.com/en-us/azure/architecture/reference-architectures/hybrid-networking/hub-spoke">hub-and-spoke network topology&lt;/a>, which is a design pattern that consists of a central virtual network (the &lt;strong>hub&lt;/strong>) that acts as a gateway for multiple &lt;strong>spoke&lt;/strong> virtual networks. In this blog post, we will investigate how to make Azure VMware Solution work with hub and spoke topology and what are the challenges of this approach.&lt;/p>
&lt;p>By using a hub and spoke topology with Azure VMware Solution, you can achieve several benefits such as improved security &amp;amp; isolation of cloud hosted workloads. However, you also need to consider some challenges such as complexity, latency, bandwidth limitations, routing complexity, firewall rules management, etc. Therefore, it is important to plan your network design carefully according to your specific requirements.&lt;/p>
&lt;p>The official Azure documentation already provides a set of scenarios related to network connectivity for Azure VMware Solution. You can find them &lt;a href="https://learn.microsoft.com/en-us/azure/cloud-adoption-framework/scenarios/azure-vmware/example-architectures">here&lt;/a>. In this blog post series, we will reproduce, step-by-step, a mock-up scenario very close from the &lt;a href="https://learn.microsoft.com/en-us/azure/cloud-adoption-framework/scenarios/azure-vmware/example-architectures#network-virtual-appliance-in-azure-virtual-network-to-inspect-all-network-traffic">&lt;em>Network virtual appliance in Azure Virtual Network to inspect all network traffic&lt;/em>&lt;/a> one.&lt;/p>
&lt;blockquote>
&lt;p>The components and network design described in this blog post are only for demonstration purposes. They are not intended to be used in a production environment and does not represent Azure best practices. They are provided as-is for mock-up and learning purposes only.&lt;/p>&lt;/blockquote>
&lt;h2 id="materials">Materials&lt;/h2>
&lt;p>To illustrate this blog post series, I created a &lt;a href="https://github.com/lrivallain/azure-labs-and-scripts/tree/master/hub-and-spoke-avs-transit-step-by-step">GitHub repository&lt;/a> to host Terraform code to reproduce each step of the process documented here.&lt;/p>
&lt;p>Using this Terraform content provides a repeatable way to deploy the same environment on Azure but all the steps described in this blog post can also be reproduced using the Azure Portal or Azure CLI.&lt;/p>
&lt;h3 id="azure-vmware-solution-deployment">Azure VMware Solution deployment&lt;/h3>
&lt;p>The deployment and configuration of Azure VMware Solution is out of the scope of this blog post. We consider that the AVS environment is already deployed and configured. We will cover the mandatory settings for Hub and Spoke topology in a section of this series.&lt;/p>
&lt;h2 id="stage-0--basic-setup">Stage 0 – Basic setup&lt;/h2>
&lt;p>As a first step, we will start our lab setup with some very basic components like:&lt;/p>
&lt;ul>
&lt;li>A hub vNET: &lt;code>hub-vnet&lt;/code>
&lt;ul>
&lt;li>A VM (to be NVA)&lt;/li>
&lt;li>A Virtual Network Gateway
&lt;ul>
&lt;li>I choose a VPN one to simulate an On Premises behavior without having a costing Express Route circuit at my disposal&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>2 spokes vNET: &lt;code>spoke1-vnet&lt;/code> and &lt;code>spoke2-vnet&lt;/code>
&lt;ul>
&lt;li>With a spoke VM in each one&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>A P2S VPN Subnet will act as an On-Premises based workload&lt;/li>
&lt;/ul>
&lt;p>&lt;figure>
&lt;picture>
&lt;img
loading="lazy"
decoding="async"
alt="Hub and Spoke components of Stage 0"
class="image_figure image_internal image_unprocessed"
src="https://vuptime.io/images/avs-nva/stage0/hub_and_spoke_avs-Step0.drawio.png"
/>
&lt;/picture>
&lt;/figure>
&lt;/p>
&lt;h3 id="routes-analysis">Routes analysis&lt;/h3>
&lt;p>Once this setup is built, we can have a look at routing configuration between components:&lt;/p>
&lt;p>Effective routes on &lt;code>hub-nva.nic[0]&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">az network nic show-effective-route-table &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl">&lt;span class="se">&lt;/span> --ids /subscriptions/&amp;lt;sub-id&amp;gt;/resourceGroups/nva-testing-RG/providers/Microsoft.Network/networkInterfaces/hub-nva-nic &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl">&lt;span class="se">&lt;/span> -o table
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">4&lt;/span>&lt;span class="cl">&lt;span class="c1"># output&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">5&lt;/span>&lt;span class="cl">Source State Address Prefix Next Hop Type Next Hop IP
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">6&lt;/span>&lt;span class="cl">-------------------- - ------ - ---------------- -------------------- - ------------ -
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">7&lt;/span>&lt;span class="cl">Default Active 10.100.200.0/24 VnetLocal
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">8&lt;/span>&lt;span class="cl">VirtualNetworkGateway Active 10.100.204.0/24 VirtualNetworkGateway 20.16.121.157
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">9&lt;/span>&lt;span class="cl">Default Active 0.0.0.0/0 Internet
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>From UI:
&lt;figure>
&lt;picture>
&lt;img
loading="lazy"
decoding="async"
alt="Effective routes on hub-nva.nic[0]"
class="image_figure image_internal image_unprocessed"
src="https://vuptime.io/images/avs-nva/stage0/effectives-routes-hub-nva.png"
/>
&lt;/picture>
&lt;/figure>
&lt;/p>
&lt;p>Effective routes on &lt;code>spoke-1-vm.nic[0]&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">az network nic show-effective-route-table &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl">&lt;span class="se">&lt;/span> --ids /subscriptions/&amp;lt;sub-id&amp;gt;/resourceGroups/nva-testing-RG/providers/Microsoft.Network/networkInterfaces/spoke-1-vnet-vm-nic &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl">&lt;span class="se">&lt;/span> -o table
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">4&lt;/span>&lt;span class="cl">&lt;span class="c1"># output&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">5&lt;/span>&lt;span class="cl">Source State Address Prefix Next Hop Type Next Hop IP
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">6&lt;/span>&lt;span class="cl">-------- ------ - ---------------- -------------- - ------------ -
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">7&lt;/span>&lt;span class="cl">Default Active 10.100.201.0/24 VnetLocal
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">8&lt;/span>&lt;span class="cl">Default Active 0.0.0.0/0 Internet
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>From UI:
&lt;figure>
&lt;picture>
&lt;img
loading="lazy"
decoding="async"
alt="Effective routes on spoke-1-vm.nic[0]"
class="image_figure image_internal image_unprocessed"
src="https://vuptime.io/images/avs-nva/stage0/effectives-routes-spoke-1-vm.png"
/>
&lt;/picture>
&lt;/figure>
&lt;/p>
&lt;p>As you can already guess from both diagram and routes listing, the communication between distinct vNets is not possible:
Example, from &lt;code>hub-nva&lt;/code> to &lt;code>spoke-1-vm&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">ubuntu@hub-nva:~$ ping 10.100.201.4 -c3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl">&lt;span class="c1"># output&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl">PING 10.100.201.4 &lt;span class="o">(&lt;/span>10.100.201.4&lt;span class="o">)&lt;/span> 56&lt;span class="o">(&lt;/span>84&lt;span class="o">)&lt;/span> bytes of data.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">4&lt;/span>&lt;span class="cl">-- - 10.100.201.4 ping statistics ---
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">5&lt;/span>&lt;span class="cl">&lt;span class="m">3&lt;/span> packets transmitted, &lt;span class="m">0&lt;/span> received, 100% packet loss, &lt;span class="nb">time&lt;/span> 2036ms
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If we try to communicate between spokes, the result will be the same: their is no connectivity between vNets.&lt;/p>
&lt;h3 id="additional-information-about-azure-routing">Additional information about Azure Routing&lt;/h3>
&lt;p>If you need to learn more about network &amp;amp; routing in Azure, I strongly recommend you to read the following amazing blog posts:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://blog.cloudtrooper.net/2023/01/21/azure-networking-is-not-like-your-on-onprem-network/">Azure Networking is not like your on-onprem network&lt;/a> by Jose Moreno&lt;/li>
&lt;li>&lt;a href="https://github.com/cynthiatreger/az-routing-guide-ep2-nic-routing">NIC Routing &amp;amp; Azure routes&lt;/a> by Cynthia Treger&lt;/li>
&lt;/ul>
&lt;h2 id="stage-1--peering-spokes">Stage 1 – Peering spokes&lt;/h2>
&lt;p>In this stage, we will add a peering between &lt;code>spoke1-vnet&lt;/code>, &lt;code>spoke2-vnet&lt;/code> and &lt;code>hub-vnet&lt;/code> to enable communication.&lt;/p>
&lt;p>&lt;figure>
&lt;picture>
&lt;img
loading="lazy"
decoding="async"
alt="Hub and Spoke components of Stage 1"
class="image_figure image_internal image_unprocessed"
src="https://vuptime.io/images/avs-nva/stage1/hub_and_spoke_avs-Step1.drawio.png"
/>
&lt;/picture>
&lt;/figure>
&lt;/p>
&lt;h3 id="routes-analysis-s1">Routes analysis (s1)&lt;/h3>
&lt;p>Once this setup is built, we can have a look at routing configuration between components:&lt;/p>
&lt;p>Effective routes on &lt;code>hub-nva.nic[0]&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="ln"> 1&lt;/span>&lt;span class="cl">az network nic show-effective-route-table &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 2&lt;/span>&lt;span class="cl">&lt;span class="se">&lt;/span> --ids /subscriptions/&amp;lt;sub-id&amp;gt;/resourceGroups/nva-testing-RG/providers/Microsoft.Network/networkInterfaces/hub-nva-nic &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 3&lt;/span>&lt;span class="cl">&lt;span class="se">&lt;/span> -o table
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 4&lt;/span>&lt;span class="cl">&lt;span class="c1"># output&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 5&lt;/span>&lt;span class="cl">Source State Address Prefix Next Hop Type Next Hop IP
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 6&lt;/span>&lt;span class="cl">--------------------- ------- ---------------- --------------------- -------------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 7&lt;/span>&lt;span class="cl">Default Active 10.100.200.0/24 VnetLocal
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 8&lt;/span>&lt;span class="cl">Default Active 10.100.201.0/24 VNetPeering
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 9&lt;/span>&lt;span class="cl">Default Active 10.100.202.0/24 VNetPeering
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">10&lt;/span>&lt;span class="cl">VirtualNetworkGateway Active 10.100.204.0/24 VirtualNetworkGateway 20.16.121.157
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">11&lt;/span>&lt;span class="cl">Default Active 0.0.0.0/0 Internet
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;figure>
&lt;picture>
&lt;img
loading="lazy"
decoding="async"
alt="Effective routes on hub-nva.nic[0]"
class="image_figure image_internal image_unprocessed"
src="https://vuptime.io/images/avs-nva/stage1/effectives-routes-hub-nva.png"
/>
&lt;/picture>
&lt;/figure>
&lt;/p>
&lt;p>Effective routes on &lt;code>spoke-1-vm.nic[0]&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="ln"> 1&lt;/span>&lt;span class="cl">az network nic show-effective-route-table &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 2&lt;/span>&lt;span class="cl">&lt;span class="se">&lt;/span> --ids /subscriptions/&amp;lt;sub-id&amp;gt;/resourceGroups/nva-testing-RG/providers/Microsoft.Network/networkInterfaces/spoke-1-vnet-vm-nic &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 3&lt;/span>&lt;span class="cl">&lt;span class="se">&lt;/span> -o table
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 4&lt;/span>&lt;span class="cl">&lt;span class="c1"># output&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 5&lt;/span>&lt;span class="cl">Source State Address Prefix Next Hop Type Next Hop IP
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 6&lt;/span>&lt;span class="cl">-------------------- - ------ - ---------------- -------------------- - ------------ -
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 7&lt;/span>&lt;span class="cl">Default Active 10.100.201.0/24 VnetLocal
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 8&lt;/span>&lt;span class="cl">Default Active 10.100.200.0/24 VNetPeering
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 9&lt;/span>&lt;span class="cl">VirtualNetworkGateway Active 10.100.204.0/24 VirtualNetworkGateway 20.16.121.157
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">10&lt;/span>&lt;span class="cl">Default Active 0.0.0.0/0 Internet
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;figure>
&lt;picture>
&lt;img
loading="lazy"
decoding="async"
alt="Effective routes on spoke-1-vm.nic[0]"
class="image_figure image_internal image_unprocessed"
src="https://vuptime.io/images/avs-nva/stage1/effectives-routes-spoke-1-vm.png"
/>
&lt;/picture>
&lt;/figure>
&lt;/p>
&lt;p>The VM in hub-vnet can now ping VMs on peered networks: Example, from &lt;code>hub-nva&lt;/code> to &lt;code>spoke-1-vm&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="ln"> 1&lt;/span>&lt;span class="cl">ubuntu@hub-nva:~$ ping 10.100.201.4 -c3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 2&lt;/span>&lt;span class="cl">&lt;span class="c1"># output&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 3&lt;/span>&lt;span class="cl">PING 10.100.201.4 &lt;span class="o">(&lt;/span>10.100.201.4&lt;span class="o">)&lt;/span> 56&lt;span class="o">(&lt;/span>84&lt;span class="o">)&lt;/span> bytes of data.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 4&lt;/span>&lt;span class="cl">&lt;span class="m">64&lt;/span> bytes from 10.100.201.4: &lt;span class="nv">icmp_seq&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1&lt;/span> &lt;span class="nv">ttl&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">64&lt;/span> &lt;span class="nv">time&lt;/span>&lt;span class="o">=&lt;/span>1.74 ms
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 5&lt;/span>&lt;span class="cl">&lt;span class="m">64&lt;/span> bytes from 10.100.201.4: &lt;span class="nv">icmp_seq&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">2&lt;/span> &lt;span class="nv">ttl&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">64&lt;/span> &lt;span class="nv">time&lt;/span>&lt;span class="o">=&lt;/span>1.14 ms
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 6&lt;/span>&lt;span class="cl">&lt;span class="m">64&lt;/span> bytes from 10.100.201.4: &lt;span class="nv">icmp_seq&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">3&lt;/span> &lt;span class="nv">ttl&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">64&lt;/span> &lt;span class="nv">time&lt;/span>&lt;span class="o">=&lt;/span>0.975 ms
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 7&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 8&lt;/span>&lt;span class="cl">-- - 10.100.201.4 ping statistics ---
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 9&lt;/span>&lt;span class="cl">&lt;span class="m">3&lt;/span> packets transmitted, &lt;span class="m">3&lt;/span> received, 0% packet loss, &lt;span class="nb">time&lt;/span> 2003ms
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">10&lt;/span>&lt;span class="cl">rtt min/avg/max/mdev &lt;span class="o">=&lt;/span> 0.975/1.284/1.744/0.331 ms
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>But VM on different spokes cannot communicate together: Example, from &lt;code>spoke-1-vm&lt;/code> to &lt;code>spoke-2-vm&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">ubuntu@spoke-1-vm:~$ ping 10.100.202.4 -c3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl">&lt;span class="c1"># output&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl">PING 10.100.202.4 &lt;span class="o">(&lt;/span>10.100.202.4&lt;span class="o">)&lt;/span> 56&lt;span class="o">(&lt;/span>84&lt;span class="o">)&lt;/span> bytes of data.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">4&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">5&lt;/span>&lt;span class="cl">-- - 10.100.202.4 ping statistics ---
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">6&lt;/span>&lt;span class="cl">&lt;span class="m">3&lt;/span> packets transmitted, &lt;span class="m">0&lt;/span> received, 100% packet loss, &lt;span class="nb">time&lt;/span> 2029ms
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>From a VPN client, we can now see the routes to all networks:&lt;/p>
&lt;ul>
&lt;li>10.100.202.0/24: &lt;code>spoke2-vnet&lt;/code>&lt;/li>
&lt;li>10.100.201.0/24: &lt;code>spoke1-vnet&lt;/code>&lt;/li>
&lt;li>10.100.200.0/24: &lt;code>hub-vnet&lt;/code>&lt;/li>
&lt;li>10.100.204.0/24: &lt;code>VPN client range&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="additional-information-about-azure-peering">Additional information about Azure Peering&lt;/h3>
&lt;p>If you need to learn more about network peering in Azure, I strongly recommend you to read the following posts:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://blog.cloudtrooper.net/2021/06/18/vnet-peering-settings-those-familiar-strangers/">VNet peering settings, those familiar strangers&lt;/a> by Jose Moreno&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/en-us/azure/virtual-network/virtual-network-peering-overview">Virtual network peering&lt;/a> in Azure documentation&lt;/li>
&lt;/ul>
&lt;h2 id="stage-2--user-defined-route-on-spokes--gw-propagation-true">Stage 2 – User Defined Route on spokes / GW propagation true&lt;/h2>
&lt;p>In this stage, we will add a UDR on &lt;code>spoke1-vnet&lt;/code> and &lt;code>spoke2-vnet&lt;/code> to enable communication between spokes.&lt;/p>
&lt;p>&lt;figure>
&lt;picture>
&lt;img
loading="lazy"
decoding="async"
alt="Hub and Spoke components of Stage 2"
class="image_figure image_internal image_unprocessed"
src="https://vuptime.io/images/avs-nva/stage2/hub_and_spoke_avs-Step2.drawio.png"
/>
&lt;/picture>
&lt;/figure>
&lt;/p>
&lt;p>For each spoke subnet, we will add a UDR with the following configuration:&lt;/p>
&lt;ul>
&lt;li>0.0.0.0/0 via &lt;code>nva-vm.nic[0].ipaddress&lt;/code>&lt;/li>
&lt;li>&lt;code>disable_bgp_route_propagation = false&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>From UI, it looks like this:&lt;/p>
&lt;p>&lt;figure>
&lt;picture>
&lt;img
loading="lazy"
decoding="async"
alt="UDR on spoke vNets"
class="image_figure image_internal image_unprocessed"
src="https://vuptime.io/images/avs-nva/stage2/UserDefinedRoute-spoke.png"
/>
&lt;/picture>
&lt;/figure>
&lt;/p>
&lt;p>The next hop address is the IP address of the &lt;code>hub-nva&lt;/code> VM NIC in the hub-vnet.&lt;/p>
&lt;p>We also setup the following &lt;em>Gateway route propagation&lt;/em> configuration:&lt;/p>
&lt;p>&lt;figure>
&lt;picture>
&lt;img
loading="lazy"
decoding="async"
alt="UDR route propagation configuration on spoke vNets"
class="image_figure image_internal image_unprocessed"
src="https://vuptime.io/images/avs-nva/stage2/UserDefinedRouteConfiguration-spoke.png"
/>
&lt;/picture>
&lt;/figure>
&lt;/p>
&lt;div class="notices warning">
&lt;div class="label">disable&amp;#43;false&lt;/div>
&lt;p>You may notice a difference in wording between Azure UI and Terraform regarding &lt;em>Gateway route propagation&lt;/em> setting. In Azure UI, the option is called &lt;code>Propagate gateway route&lt;/code>. In API based tools like Terraform, Bicep and ARM, the option is called &lt;code>disableBgpRoutePropagation&lt;/code> (ARM/Bicep) or &lt;code>disable_bgp_route_propagation&lt;/code> (Terraform).&lt;/p>
&lt;p>This can be confusing when related to boolean values. In this case, &lt;code>false&lt;/code> means that the routes from &lt;em>Gateway&lt;/em> components will be propagated to the subnets associated with the UDR.&lt;/p>
&lt;/div>
&lt;h3 id="routes-analysis-s2">Routes analysis (s2)&lt;/h3>
&lt;p>Effective routes on &lt;code>spoke-1-vm.nic[0]&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">az network nic show-effective-route-table --ids /subscriptions/&amp;lt;sub-id&amp;gt;/resourceGroups/nva-testing-RG/providers/Microsoft.Network/networkInterfaces/spoke-1-vnet-vm-nic -o table
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl">&lt;span class="c1"># output&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl">Source State Address Prefix Next Hop Type Next Hop IP
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">4&lt;/span>&lt;span class="cl">--------------------- ------- ---------------- --------------------- -------------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">5&lt;/span>&lt;span class="cl">Default Active 10.100.201.0/24 VnetLocal
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">6&lt;/span>&lt;span class="cl">Default Active 10.100.200.0/24 VNetPeering
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">7&lt;/span>&lt;span class="cl">VirtualNetworkGateway Active 10.100.204.0/24 VirtualNetworkGateway 20.16.121.157
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">8&lt;/span>&lt;span class="cl">Default Invalid 0.0.0.0/0 Internet
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">9&lt;/span>&lt;span class="cl">User Active 0.0.0.0/0 VirtualAppliance 10.100.200.68 &lt;span class="c1"># &amp;lt;--- via hub-nva&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;figure>
&lt;picture>
&lt;img
loading="lazy"
decoding="async"
alt="Effective routes on spoke-1-vm.nic[0]"
class="image_figure image_internal image_unprocessed"
src="https://vuptime.io/images/avs-nva/stage2/effectives-routes-spoke-1-vm.png"
/>
&lt;/picture>
&lt;/figure>
&lt;/p>
&lt;p>VM on different spokes can communicate together: Example, from &lt;code>spoke-1-vm&lt;/code> to &lt;code>spoke-2-vm&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="ln"> 1&lt;/span>&lt;span class="cl">ubuntu@spoke-1-vnet-vm:~$ ping 10.100.202.4 -c3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 2&lt;/span>&lt;span class="cl">&lt;span class="c1"># output&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 3&lt;/span>&lt;span class="cl">PING 10.100.202.4 &lt;span class="o">(&lt;/span>10.100.202.4&lt;span class="o">)&lt;/span> 56&lt;span class="o">(&lt;/span>84&lt;span class="o">)&lt;/span> bytes of data.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 4&lt;/span>&lt;span class="cl">&lt;span class="m">64&lt;/span> bytes from 10.100.202.4: &lt;span class="nv">icmp_seq&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1&lt;/span> &lt;span class="nv">ttl&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">63&lt;/span> &lt;span class="nv">time&lt;/span>&lt;span class="o">=&lt;/span>4.05 ms
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 5&lt;/span>&lt;span class="cl">&lt;span class="m">64&lt;/span> bytes from 10.100.202.4: &lt;span class="nv">icmp_seq&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">2&lt;/span> &lt;span class="nv">ttl&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">63&lt;/span> &lt;span class="nv">time&lt;/span>&lt;span class="o">=&lt;/span>1.59 ms
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 6&lt;/span>&lt;span class="cl">&lt;span class="m">64&lt;/span> bytes from 10.100.202.4: &lt;span class="nv">icmp_seq&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">3&lt;/span> &lt;span class="nv">ttl&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">63&lt;/span> &lt;span class="nv">time&lt;/span>&lt;span class="o">=&lt;/span>2.18 ms
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 7&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 8&lt;/span>&lt;span class="cl">-- - 10.100.202.4 ping statistics ---
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 9&lt;/span>&lt;span class="cl">&lt;span class="m">3&lt;/span> packets transmitted, &lt;span class="m">3&lt;/span> received, 0% packet loss, &lt;span class="nb">time&lt;/span> 2001ms
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">10&lt;/span>&lt;span class="cl">rtt min/avg/max/mdev &lt;span class="o">=&lt;/span> 1.587/2.604/4.049/1.049 ms
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>From the &lt;code>hub-nva&lt;/code> VM, we can see the traffic going through:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">IP 10.100.201.4 &amp;gt; 10.100.202.4: ICMP echo request, id 8, seq 1, length 64
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl">IP 10.100.200.68 &amp;gt; 10.100.202.4: ICMP echo request, id 8, seq 1, length 64
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl">IP 10.100.202.4 &amp;gt; 10.100.200.68: ICMP echo reply, id 8, seq 1, length 64
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">4&lt;/span>&lt;span class="cl">IP 10.100.202.4 &amp;gt; 10.100.201.4: ICMP echo reply, id 8, seq 1, length 6
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>From a VPN connection we can reach spoke resources:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">ubuntu@vpn-client:~$ ping 10.100.201.4 -c3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl">&lt;span class="c1"># output&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl">PING 10.100.201.4 &lt;span class="o">(&lt;/span>10.100.201.4&lt;span class="o">)&lt;/span> 56&lt;span class="o">(&lt;/span>84&lt;span class="o">)&lt;/span> bytes of data.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">4&lt;/span>&lt;span class="cl">&lt;span class="m">64&lt;/span> bytes from 10.100.201.4: &lt;span class="nv">icmp_seq&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1&lt;/span> &lt;span class="nv">ttl&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">63&lt;/span> &lt;span class="nv">time&lt;/span>&lt;span class="o">=&lt;/span>24.1 ms
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">5&lt;/span>&lt;span class="cl">&lt;span class="m">64&lt;/span> bytes from 10.100.201.4: &lt;span class="nv">icmp_seq&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">2&lt;/span> &lt;span class="nv">ttl&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">63&lt;/span> &lt;span class="nv">time&lt;/span>&lt;span class="o">=&lt;/span>22.7 ms
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">6&lt;/span>&lt;span class="cl">&lt;span class="m">64&lt;/span> bytes from 10.100.201.4: &lt;span class="nv">icmp_seq&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">3&lt;/span> &lt;span class="nv">ttl&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">63&lt;/span> &lt;span class="nv">time&lt;/span>&lt;span class="o">=&lt;/span>24.9 ms
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>But… if we look from the &lt;code>hub-nva&lt;/code> VM, there is no match for this network traffic. Meaning that the traffic is, as we can guess from the effective routes tables on spokes VMs, going directly from spokes VMs to the VPN Gateway and vice&amp;amp;versa.&lt;/p>
&lt;p>We will try to mitigate this in the next steps by forcing the traffic to go through the &lt;code>hub-nva&lt;/code> VM.&lt;/p>
&lt;h3 id="additional-information-about-azure-udr">Additional information about Azure UDR&lt;/h3>
&lt;p>If you need to learn more about UDR in Azure, I strongly recommend you to read the following posts:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://learn.microsoft.com/en-us/azure/virtual-network/virtual-networks-udr-overview#user-defined">User Defined Routes&lt;/a> in Azure documentation&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/en-us/azure/virtual-network/virtual-networks-udr-overview#how-azure-selects-a-route">How Azure selects a route&lt;/a> in Azure documentation&lt;/li>
&lt;li>&lt;a href="https://blog.cloudtrooper.net/2020/11/28/dont-let-your-azure-routes-bite-you/">Don’t let your Azure Routes bite you&lt;/a> by Jose Moreno&lt;/li>
&lt;/ul>
&lt;h2 id="stage-3--user-defined-route-on-spokes--gw-propagation-false">Stage 3 – User Defined Route on spokes / GW propagation false&lt;/h2>
&lt;p>In this stage, we will start mitigating the issue we have in the previous stage about the network traffic, related to VPN, bypassing our NVA device.&lt;/p>
&lt;p>The first thing we can try is to disable &lt;em>Gateway route propagation&lt;/em> on the UDRs we have created in the previous stage.&lt;/p>
&lt;p>&lt;figure>
&lt;picture>
&lt;img
loading="lazy"
decoding="async"
alt="Hub and Spoke components of Stage 3"
class="image_figure image_internal image_unprocessed"
src="https://vuptime.io/images/avs-nva/stage3/hub_and_spoke_avs-Step3.drawio.png"
/>
&lt;/picture>
&lt;/figure>
&lt;/p>
&lt;p>For each spoke subnet, we will add a UDR with the following configuration:&lt;/p>
&lt;ul>
&lt;li>0.0.0.0/0 via &lt;code>nva-vm.nic[0].ipaddress&lt;/code>&lt;/li>
&lt;li>&lt;code>disable_bgp_route_propagation = true&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>From UI, it looks like this:&lt;/p>
&lt;p>&lt;figure>
&lt;picture>
&lt;img
loading="lazy"
decoding="async"
alt="UDR route propagation configuration on spoke vNets"
class="image_figure image_internal image_unprocessed"
src="https://vuptime.io/images/avs-nva/stage2/UserDefinedRouteConfiguration-spoke.png"
/>
&lt;/picture>
&lt;/figure>
&lt;/p>
&lt;div class="notices warning">
&lt;div class="label">disable&amp;#43;false&lt;/div>
&lt;p>As mentioned earlier, if you use an automation tool to setup this configuration value, you will notice a confusing wording. In Azure UI, the option is called &lt;code>Propagate gateway route&lt;/code>. In API based tools like Terraform, Bicep and ARM, the option is called &lt;code>disableBgpRoutePropagation&lt;/code> (ARM/Bicep) or &lt;code>disable_bgp_route_propagation&lt;/code> (Terraform).&lt;/p>
&lt;p>In this case, &lt;code>true&lt;/code> means that the routes from &lt;em>Gateway&lt;/em> components will not be propagated to the subnets associated with the UDR.&lt;/p>
&lt;/div>
&lt;h3 id="routes-analysis-s3">Routes analysis (s3)&lt;/h3>
&lt;p>Effective routes on &lt;code>spoke-1-vm.nic[0]&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="ln"> 1&lt;/span>&lt;span class="cl">az network nic show-effective-route-table &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 2&lt;/span>&lt;span class="cl">&lt;span class="se">&lt;/span> --ids /subscriptions/&amp;lt;sub-id&amp;gt;/resourceGroups/nva-testing-RG/providers/Microsoft.Network/networkInterfaces/spoke-1-vnet-vm-nic &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 3&lt;/span>&lt;span class="cl">&lt;span class="se">&lt;/span> -o table
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 4&lt;/span>&lt;span class="cl">&lt;span class="c1"># output&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 5&lt;/span>&lt;span class="cl">Source State Address Prefix Next Hop Type Next Hop IP
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 6&lt;/span>&lt;span class="cl">-------- ------ - ---------------- ---------------- ------------ -
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 7&lt;/span>&lt;span class="cl">Default Active 10.100.201.0/24 VnetLocal
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 8&lt;/span>&lt;span class="cl">Default Active 10.100.200.0/24 VNetPeering
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 9&lt;/span>&lt;span class="cl">Default Invalid 0.0.0.0/0 Internet
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">10&lt;/span>&lt;span class="cl">User Active 0.0.0.0/0 VirtualAppliance 10.100.200.68 &lt;span class="c1"># &amp;lt;--- via hub-nva&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;figure>
&lt;picture>
&lt;img
loading="lazy"
decoding="async"
alt="Effective routes on spoke-1-vm.nic[0]"
class="image_figure image_internal image_unprocessed"
src="https://vuptime.io/images/avs-nva/stage3/effectives-routes-spoke-1-vm.png"
/>
&lt;/picture>
&lt;/figure>
&lt;/p>
&lt;p>According to the new UDR setting: The route to the VPN subnet is no more directly published in the effective routes for &lt;code>spoke-1-vm&lt;/code> NIC.
If &lt;code>spoke-1-vm&lt;/code> need to communicate with a VPN based resource, the default &lt;code>0/0&lt;/code> path will be used, going through the &lt;code>hub-nva&lt;/code> VM.&lt;/p>
&lt;p>If we try a ping from VPN client to &lt;code>spoke-1-vm&lt;/code>, it works…&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="ln"> 1&lt;/span>&lt;span class="cl">ubuntu@vpn-client:~$ ping 10.100.201.4 -c3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 2&lt;/span>&lt;span class="cl">&lt;span class="c1"># output&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 3&lt;/span>&lt;span class="cl">PING 10.100.201.4 &lt;span class="o">(&lt;/span>10.100.201.4&lt;span class="o">)&lt;/span> 56&lt;span class="o">(&lt;/span>84&lt;span class="o">)&lt;/span> bytes of data.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 4&lt;/span>&lt;span class="cl">&lt;span class="m">64&lt;/span> bytes from 10.100.201.4: &lt;span class="nv">icmp_seq&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1&lt;/span> &lt;span class="nv">ttl&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">62&lt;/span> &lt;span class="nv">time&lt;/span>&lt;span class="o">=&lt;/span>23.6 ms
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 5&lt;/span>&lt;span class="cl">&lt;span class="m">64&lt;/span> bytes from 10.100.201.4: &lt;span class="nv">icmp_seq&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">2&lt;/span> &lt;span class="nv">ttl&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">62&lt;/span> &lt;span class="nv">time&lt;/span>&lt;span class="o">=&lt;/span>48.0 ms
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 6&lt;/span>&lt;span class="cl">&lt;span class="m">64&lt;/span> bytes from 10.100.201.4: &lt;span class="nv">icmp_seq&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">3&lt;/span> &lt;span class="nv">ttl&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">62&lt;/span> &lt;span class="nv">time&lt;/span>&lt;span class="o">=&lt;/span>64.1 ms
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 7&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 8&lt;/span>&lt;span class="cl">-- - 10.100.201.4 ping statistics ---
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 9&lt;/span>&lt;span class="cl">&lt;span class="m">3&lt;/span> packets transmitted, &lt;span class="m">3&lt;/span> received, 0% packet loss, &lt;span class="nb">time&lt;/span> 2001ms
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">10&lt;/span>&lt;span class="cl">rtt min/avg/max/mdev &lt;span class="o">=&lt;/span> 23.609/45.235/64.094/16.643 ms
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>… but, there is a glitch in the Matrix:&lt;/p>
&lt;p>&lt;figure>
&lt;picture>
&lt;img
loading="lazy"
decoding="async"
alt="Glitch in the Matrix: Asymmetric routing"
class="image_figure image_internal image_unprocessed"
src="https://vuptime.io/images/avs-nva/stage3/hub_and_spoke_avs-Step3-AsymmetricTraffic.drawio.png"
/>
&lt;/picture>
&lt;/figure>
&lt;/p>
&lt;p>As you can see, only the traffic from &lt;code>spoke-1-vm&lt;/code> to VPN is going through the &lt;code>hub-nva&lt;/code>. On the contrary, traffic from VPN clients is going directly to spoke VMs resulting in an asymmetric network pattern.&lt;/p>
&lt;p>For example, when doing a ping from VPN client to &lt;code>spoke-1-vm&lt;/code>, we can only see echo &lt;em>reply&lt;/em> going through the &lt;code>hub-nva&lt;/code> when doing a tcpdump:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">ubuntu@hub-nva:~$ sudo tcpdump -nni eth0 icmp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl">&lt;span class="c1"># output&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl">IP 10.100.201.4 &amp;gt; 10.100.200.68: ICMP &lt;span class="nb">echo&lt;/span> reply, id 1002, seq 1, length &lt;span class="m">64&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">4&lt;/span>&lt;span class="cl">IP 10.100.201.4 &amp;gt; 10.100.204.2: ICMP &lt;span class="nb">echo&lt;/span> reply, id 1002, seq 1, length &lt;span class="m">64&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The echo &lt;em>request&lt;/em> is missing: the flow from VPN client is not passing through the hub-nva.&lt;/p>
&lt;h3 id="additional-information-about-gateway-route-propagation">Additional information about Gateway route propagation&lt;/h3>
&lt;p>If you are interested in more details about the &lt;em>Gateway route propagation&lt;/em> feature, you can refer to the following posts:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://learn.microsoft.com/en-us/azure/virtual-network/virtual-networks-udr-overview#border-gateway-protocol">Border gateway protocol&lt;/a> in the Azure documentation&lt;/li>
&lt;li>&lt;a href="https://blog.cloudtrooper.net/2023/02/06/virtual-network-gateways-routing-in-azure/">Virtual Network Gateways routing in Azure&lt;/a> by Jose Moreno&lt;/li>
&lt;li>&lt;a href="https://github.com/cynthiatreger/az-routing-guide-ep1-vnet-peering-and-virtual-network-gateways#12-connectivity-impact-of-adding-a-virtual-network-gateway-er-or-vpn">Connectivity impact of adding a Virtual Network Gateway (ER or VPN)&lt;/a> by Cynthia Treger&lt;/li>
&lt;/ul>
&lt;h2 id="part-1--conclusion">Part 1 – Conclusion&lt;/h2>
&lt;p>In the previous stages, we have seen how to initialize a hub and spoke topology within Azure. At the current stage, our Azure hosted spokes vNet are using the hub vNet as a transit network, leveraging on the default route configured on User Defined Routes (UDR).&lt;/p>
&lt;p>Regarding the VPN connectivity (acting as On Premises workloads), we have discovered that we are facing an asymmetric routing issue. Traffic from VPN clients to Azure hosted VMs is not going through the NVA VM deployed in the hub vNet.&lt;/p>
&lt;p>As a reminder, you can leverage on the content of the following GitHub repository to reproduce the steps described in this post: &lt;a href="https://github.com/lrivallain/azure-labs-and-scripts/tree/master/hub-and-spoke-avs-transit-step-by-step">hub-and-spoke-avs-transit-step-by-step&lt;/a>.&lt;/p>
&lt;p>&lt;strong>In the next post&lt;/strong>, we will see how to mitigate this issue by leveraging on a new User Defined Route configuration. We will also introduce the connectivity of Azure VMware Solution (AVS) to this hub and spoke topology.&lt;/p></description></item></channel></rss>