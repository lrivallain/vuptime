<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>knative on vUptime.io - Cloud builder(s)</title><link>vuptime.io/tags/knative/</link><description>Recent content in knative on vUptime.io - Cloud builder(s)</description><generator>Hugo -- gohugo.io</generator><copyright>Ludovic Rivallain and blog co-authors</copyright><lastBuildDate>Thu, 06 May 2021 00:00:00 +0000</lastBuildDate><atom:link href="vuptime.io/tags/knative/feed.xml" rel="self" type="application/rss+xml"/><item><title>VMware Event Broker on Kubernetes with Knative functions - part 2</title><link>vuptime.io/post/2021-05-06-vmware-event-broker-on-k8s-with-knative-part2/</link><pubDate>Thu, 06 May 2021 00:00:00 +0000</pubDate><guid>/2021/05/06/vmware-event-broker-on-k8s-with-knative-part2/</guid><description>
&lt;p>This post is the second part of a small series about &lt;em>VMware Event Broker on Kubernetes with Knative functions&lt;/em>.&lt;/p>
&lt;blockquote>
&lt;p>If you plan to apply the following procedure, we assume that the content mentioned in the &lt;a href="vuptime.io/2021/05/05/vmware-event-broker-on-k8s-with-knative-part1">&lt;strong>Part 1&lt;/strong>&lt;/a> is already deployed in your target setup.&lt;/p>
&lt;/blockquote>
&lt;h1 id="deploy-vmware-event-broker-with-knative-support">Deploy VMware Event Broker with knative support&lt;/h1>
&lt;blockquote>
&lt;p>&lt;strong>Disclaimer&lt;/strong>: This section of the post was made with the help of &lt;a href="https://github.com/embano1">@embano1&lt;/a> who provided a knative-ready helm chart for vcenter-event-broker deployment (&lt;a href="https://github.com/vmware-samples/vcenter-event-broker-appliance/pull/392">PR:392&lt;/a>). He also provided an example of the &lt;code>override.yaml&lt;/code> file we will use below.&lt;/p>
&lt;/blockquote>
&lt;h2 id="create-a-namespace">Create a namespace&lt;/h2>
&lt;p>The following commands will create a namespace &lt;code>vmware-fn&lt;/code> to host and run automation functions.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>cat &lt;span class="s">&amp;lt;&amp;lt; EOF &amp;gt; vmware-fn-ns.yaml
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="s">---
&lt;/span>&lt;span class="ln"> 3&lt;/span>&lt;span class="s">apiVersion: v1
&lt;/span>&lt;span class="ln"> 4&lt;/span>&lt;span class="s">kind: Namespace
&lt;/span>&lt;span class="ln"> 5&lt;/span>&lt;span class="s">metadata:
&lt;/span>&lt;span class="ln"> 6&lt;/span>&lt;span class="s"> name: vmware-fn
&lt;/span>&lt;span class="ln"> 7&lt;/span>&lt;span class="s">EOF&lt;/span>
&lt;span class="ln"> 8&lt;/span>
&lt;span class="ln"> 9&lt;/span>kubectl apply -f vmware-fn-ns.yaml
&lt;span class="ln">10&lt;/span>
&lt;span class="ln">11&lt;/span>kubectl get ns vmware-fn
&lt;span class="ln">12&lt;/span>&lt;span class="c1"># Output&lt;/span>
&lt;span class="ln">13&lt;/span>NAME STATUS AGE
&lt;span class="ln">14&lt;/span>vmware-fn Active 10s
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>Of course: you can customize this target namespace and even re-use an existing one.&lt;/p>
&lt;/blockquote>
&lt;h2 id="create-a-broker">Create a Broker&lt;/h2>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>cat &lt;span class="s">&amp;lt;&amp;lt; EOF &amp;gt; mt-broker.yaml
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="s">---
&lt;/span>&lt;span class="ln"> 3&lt;/span>&lt;span class="s">apiVersion: eventing.knative.dev/v1
&lt;/span>&lt;span class="ln"> 4&lt;/span>&lt;span class="s">kind: Broker
&lt;/span>&lt;span class="ln"> 5&lt;/span>&lt;span class="s">metadata:
&lt;/span>&lt;span class="ln"> 6&lt;/span>&lt;span class="s"> name: vmware-event-broker
&lt;/span>&lt;span class="ln"> 7&lt;/span>&lt;span class="s"> namespace: vmware-fn
&lt;/span>&lt;span class="ln"> 8&lt;/span>&lt;span class="s">EOF&lt;/span>
&lt;span class="ln"> 9&lt;/span>
&lt;span class="ln">10&lt;/span>kubectl apply -f mt-broker.yaml
&lt;span class="ln">11&lt;/span>
&lt;span class="ln">12&lt;/span>kubectl get broker -n vmware-fn
&lt;span class="ln">13&lt;/span>&lt;span class="c1"># Output (I remove a loooong URL field)&lt;/span>
&lt;span class="ln">14&lt;/span>NAME AGE READY
&lt;span class="ln">15&lt;/span>vmware-event-broker 23s True
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="prepare-event-router-configuration">Prepare event-router configuration&lt;/h3>
&lt;p>Create an &lt;code>override.yaml&lt;/code> with your settings:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>cat &lt;span class="s">&amp;lt;&amp;lt; EOF &amp;gt; override.yaml
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="s">eventrouter:
&lt;/span>&lt;span class="ln"> 3&lt;/span>&lt;span class="s"> config:
&lt;/span>&lt;span class="ln"> 4&lt;/span>&lt;span class="s"> logLevel: debug
&lt;/span>&lt;span class="ln"> 5&lt;/span>&lt;span class="s"> vcenter:
&lt;/span>&lt;span class="ln"> 6&lt;/span>&lt;span class="s"> address: https://vcsa.local
&lt;/span>&lt;span class="ln"> 7&lt;/span>&lt;span class="s"> username: test@vsphere.local
&lt;/span>&lt;span class="ln"> 8&lt;/span>&lt;span class="s"> password: VMware1!
&lt;/span>&lt;span class="ln"> 9&lt;/span>&lt;span class="s"> insecure: true # ignore TLS certs if required
&lt;/span>&lt;span class="ln">10&lt;/span>&lt;span class="s"> eventProcessor: knative
&lt;/span>&lt;span class="ln">11&lt;/span>&lt;span class="s"> knative:
&lt;/span>&lt;span class="ln">12&lt;/span>&lt;span class="s"> destination:
&lt;/span>&lt;span class="ln">13&lt;/span>&lt;span class="s"> ref:
&lt;/span>&lt;span class="ln">14&lt;/span>&lt;span class="s"> apiVersion: eventing.knative.dev/v1
&lt;/span>&lt;span class="ln">15&lt;/span>&lt;span class="s"> kind: Broker # we use a Knative broker to send events to
&lt;/span>&lt;span class="ln">16&lt;/span>&lt;span class="s"> name: vmware-event-broker # name of the broker
&lt;/span>&lt;span class="ln">17&lt;/span>&lt;span class="s"> namespace: vmware-fn # namespace where the broker is deployed
&lt;/span>&lt;span class="ln">18&lt;/span>&lt;span class="s">EOF&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>Ensure to specify broker name and namespace according to the one configured in the previous section.&lt;/p>
&lt;/blockquote>
&lt;h3 id="helm-deployment">Helm deployment&lt;/h3>
&lt;p>If not already done, we will register the &lt;em>veba&lt;/em> helm-charts registry and get metadata locally:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="c1"># register chart repo and update chart information&lt;/span>
&lt;span class="ln">2&lt;/span>helm repo add vmware-veba https://projects.registry.vmware.com/chartrepo/veba
&lt;span class="ln">3&lt;/span>helm repo update
&lt;/code>&lt;/pre>&lt;/div>&lt;p>At this time, the support of knative with &lt;code>helm&lt;/code> &lt;em>vmware event router&lt;/em> deployment method is only supported in chart version &amp;gt;= v0.6.2. Ensure that this version is available:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>helm search repo event-router --versions &lt;span class="p">|&lt;/span> grep v0.6.2
&lt;span class="ln">2&lt;/span>&lt;span class="c1"># Output&lt;/span>
&lt;span class="ln">3&lt;/span>vmware-veba/event-router v0.6.2 v0.6.0 The VMware Event Router is used to connect to v...
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Lets deploy it.&lt;/p>
&lt;blockquote>
&lt;p>Here we create a specific namespace &lt;code>vmware&lt;/code> for this purpose but you can reuse &lt;code>vmware-fn&lt;/code> or any other one.&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>helm install -n vmware --create-namespace veba-knative vmware-veba/event-router -f override.yaml --wait --version v0.6.2
&lt;span class="ln">2&lt;/span>&lt;span class="c1"># Output&lt;/span>
&lt;span class="ln">3&lt;/span>NAME: veba-knative
&lt;span class="ln">4&lt;/span>LAST DEPLOYED: Wed May &lt;span class="m">5&lt;/span> 12:55:39 &lt;span class="m">2021&lt;/span>
&lt;span class="ln">5&lt;/span>NAMESPACE: vmware
&lt;span class="ln">6&lt;/span>STATUS: deployed
&lt;span class="ln">7&lt;/span>REVISION: &lt;span class="m">1&lt;/span>
&lt;span class="ln">8&lt;/span>TEST SUITE: None
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We can now check that the deployment status:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>helm list --namespace vmware
&lt;span class="ln">2&lt;/span>&lt;span class="c1"># Output&lt;/span>
&lt;span class="ln">3&lt;/span>NAME NAMESPACE REVISION STATUS CHART APP VERSION
&lt;span class="ln">4&lt;/span>veba-knative vmware &lt;span class="m">1&lt;/span> deployed event-router-v0.6.2 v0.6.0
&lt;span class="ln">5&lt;/span>
&lt;span class="ln">6&lt;/span>kubectl get pod -n vmware
&lt;span class="ln">7&lt;/span>&lt;span class="c1"># Output&lt;/span>
&lt;span class="ln">8&lt;/span>NAME READY STATUS RESTARTS AGE
&lt;span class="ln">9&lt;/span>router-cdc874b59-vpckd 1/1 Running &lt;span class="m">0&lt;/span> 36s
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="usage">Usage&lt;/h1>
&lt;p>Now its time to perform some tasks based on event routing setup.&lt;/p>
&lt;h2 id="deploy-a-sample-echo-function">Deploy a sample &lt;em>echo&lt;/em> function&lt;/h2>
&lt;p>The first (and very useful!) thing we can do, is to &lt;em>echo&lt;/em> cloud events occurring in the target vCenter server.&lt;/p>
&lt;p>VEBA team provide multiple &lt;em>echo&lt;/em> samples (python or powershell based). Here we will use the python-based one provided by &lt;a href="https://github.com/embano1/kn-echo">@embano1/kn-echo&lt;/a>:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>cat &lt;span class="s">&amp;lt;&amp;lt; EOF &amp;gt; kn-py-echo.yaml
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="s">---
&lt;/span>&lt;span class="ln"> 3&lt;/span>&lt;span class="s">apiVersion: serving.knative.dev/v1
&lt;/span>&lt;span class="ln"> 4&lt;/span>&lt;span class="s">kind: Service
&lt;/span>&lt;span class="ln"> 5&lt;/span>&lt;span class="s">metadata:
&lt;/span>&lt;span class="ln"> 6&lt;/span>&lt;span class="s"> name: kn-py-echo-svc
&lt;/span>&lt;span class="ln"> 7&lt;/span>&lt;span class="s">spec:
&lt;/span>&lt;span class="ln"> 8&lt;/span>&lt;span class="s"> template:
&lt;/span>&lt;span class="ln"> 9&lt;/span>&lt;span class="s"> metadata:
&lt;/span>&lt;span class="ln">10&lt;/span>&lt;span class="s"> annotations:
&lt;/span>&lt;span class="ln">11&lt;/span>&lt;span class="s"> autoscaling.knative.dev/maxScale: &amp;#34;1&amp;#34;
&lt;/span>&lt;span class="ln">12&lt;/span>&lt;span class="s"> autoscaling.knative.dev/minScale: &amp;#34;0&amp;#34;
&lt;/span>&lt;span class="ln">13&lt;/span>&lt;span class="s"> spec:
&lt;/span>&lt;span class="ln">14&lt;/span>&lt;span class="s"> containers:
&lt;/span>&lt;span class="ln">15&lt;/span>&lt;span class="s"> - image: embano1/kn-echo
&lt;/span>&lt;span class="ln">16&lt;/span>&lt;span class="s">---
&lt;/span>&lt;span class="ln">17&lt;/span>&lt;span class="s">apiVersion: eventing.knative.dev/v1
&lt;/span>&lt;span class="ln">18&lt;/span>&lt;span class="s">kind: Trigger
&lt;/span>&lt;span class="ln">19&lt;/span>&lt;span class="s">metadata:
&lt;/span>&lt;span class="ln">20&lt;/span>&lt;span class="s"> name: kn-py-echo-trigger
&lt;/span>&lt;span class="ln">21&lt;/span>&lt;span class="s">spec:
&lt;/span>&lt;span class="ln">22&lt;/span>&lt;span class="s"> broker: vmware-event-broker
&lt;/span>&lt;span class="ln">23&lt;/span>&lt;span class="s"> subscriber:
&lt;/span>&lt;span class="ln">24&lt;/span>&lt;span class="s"> ref:
&lt;/span>&lt;span class="ln">25&lt;/span>&lt;span class="s"> apiVersion: serving.knative.dev/v1
&lt;/span>&lt;span class="ln">26&lt;/span>&lt;span class="s"> kind: Service
&lt;/span>&lt;span class="ln">27&lt;/span>&lt;span class="s"> name: kn-py-echo-svc
&lt;/span>&lt;span class="ln">28&lt;/span>&lt;span class="s">EOF&lt;/span>
&lt;span class="ln">29&lt;/span>
&lt;span class="ln">30&lt;/span>kubectl apply -n vmware-fn -f kn-py-echo.yaml
&lt;span class="ln">31&lt;/span>&lt;span class="c1"># Output&lt;/span>
&lt;span class="ln">32&lt;/span>service.serving.knative.dev/kn-py-echo-svc created
&lt;span class="ln">33&lt;/span>trigger.eventing.knative.dev/kn-py-echo-trigger created
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We can check what was created:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>kn service list -n vmware-fn
&lt;span class="ln"> 2&lt;/span>&lt;span class="c1"># Output&lt;/span>
&lt;span class="ln"> 3&lt;/span>NAME URL LATEST AGE CONDITIONS READY REASON
&lt;span class="ln"> 4&lt;/span>kn-py-echo-svc http://kn-py-echo-svc.vmware-fn.example.com kn-py-echo-svc-00001 3m34s &lt;span class="m">3&lt;/span> OK / &lt;span class="m">3&lt;/span> True
&lt;span class="ln"> 5&lt;/span>
&lt;span class="ln"> 6&lt;/span>kn trigger list -n vmware-fn
&lt;span class="ln"> 7&lt;/span>&lt;span class="c1"># Output&lt;/span>
&lt;span class="ln"> 8&lt;/span>NAME BROKER SINK AGE CONDITIONS READY REASON
&lt;span class="ln"> 9&lt;/span>kn-py-echo-trigger vmware-event-broker ksvc:kn-py-echo-svc 2m8s &lt;span class="m">5&lt;/span> OK / &lt;span class="m">5&lt;/span> True
&lt;span class="ln">10&lt;/span>
&lt;span class="ln">11&lt;/span>kubectl get pod -n vmware-fn
&lt;span class="ln">12&lt;/span>&lt;span class="c1"># Output&lt;/span>
&lt;span class="ln">13&lt;/span>NAME READY STATUS RESTARTS AGE
&lt;span class="ln">14&lt;/span>kn-py-echo-svc-00001-deployment-7d8fcf598-5g8f7 2/2 Running &lt;span class="m">0&lt;/span> 63s
&lt;/code>&lt;/pre>&lt;/div>&lt;p>As we specified &lt;code>autoscaling.knative.dev/minScale: &amp;quot;0&amp;quot;&lt;/code> in the service definition, the deployed pods may or may not be deployed at a specific time: if there is no event fired by vCenter for a period of time, Knative Serving will terminate the pod associated to the service, and recreate it when new event will arrive:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>kubectl get pod -n vmware-fn
&lt;span class="ln">2&lt;/span>&lt;span class="c1"># Output&lt;/span>
&lt;span class="ln">3&lt;/span>NAME READY STATUS RESTARTS AGE
&lt;span class="ln">4&lt;/span>No resources found in vmware-fn namespace.
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you want to look at incoming events, get the current running pod name and look at its logs:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>kubectl logs -n vmware-fn kn-py-echo-svc-00001-deployment-7d8fcf598-ngtdd user-container -f
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="deploy-vm-creation-attr-function">Deploy &lt;em>vm-creation-attr&lt;/em> function&lt;/h2>
&lt;p>I also did a re-write of the &lt;a href="https://github.com/lrivallain/openfaas-fn/tree/master/vm-creation-attr-fn">&lt;em>vm-creation-attr&lt;/em> function&lt;/a> I did write for OpenFaaS process to be knative compliant.&lt;/p>
&lt;blockquote>
&lt;p>As a reminder, I did a(nother long) post a few month back &lt;a href="https://vuptime.io/2020/12/17/vmware-event-broker-0.5.0-on-k8s-first-steps/#first-function">about this function&lt;/a>. The main goal is to populate &lt;em>custom attributes&lt;/em> values for VM object based on the user who created the VM, the creation date and the last-poweredon date.&lt;/p>
&lt;/blockquote>
&lt;p>The knative function is hosted on GitHub: &lt;a href="https://github.com/lrivallain/kn-vm-creation-attr-fn">lrivallain/kn-vm-creation-attr-fn&lt;/a>. You can get the &lt;code>function.yaml&lt;/code> file to start the deployment:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>curl -LO https://raw.githubusercontent.com/lrivallain/kn-vm-creation-attr-fn/main/function.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="configuration">Configuration&lt;/h3>
&lt;p>Edit the content of &lt;code>function.yaml&lt;/code> to configure the following settings:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1"># In `ConfigMap` section&lt;/span>
&lt;span class="ln"> 2&lt;/span>VC_SERVER: vcsa.local
&lt;span class="ln"> 3&lt;/span>VC_USER: test@vsphere.local
&lt;span class="ln"> 4&lt;/span>VC_SSLVERIFY: True
&lt;span class="ln"> 5&lt;/span>VC_ATTR_OWNER: event-owner
&lt;span class="ln"> 6&lt;/span>VC_ATTR_CREATION_DATE: event-creation_date
&lt;span class="ln"> 7&lt;/span>VC_ATTR_LAST_POWEREDON: event-last_poweredon
&lt;span class="ln"> 8&lt;/span>
&lt;span class="ln"> 9&lt;/span>&lt;span class="c1"># In `Secret` section&lt;/span>
&lt;span class="ln">10&lt;/span>VC_PASSWORD: Vk13YXJlMSEK
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>VC_PASSWORD&lt;/code> is base64 encoded: you can generate it by using a command like:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="nb">echo&lt;/span> -n &lt;span class="s2">&amp;#34;YourP@ssw0rd&amp;#34;&lt;/span> &lt;span class="p">|&lt;/span> base64
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We assume that you use the previously mentioned &lt;code>vmware-event-broker&lt;/code> broker name, but you can change it by using:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>sed -i s/vmware-event-broker/NAMEOFYOURBROKER/ &lt;span class="k">function&lt;/span>.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="deploy">Deploy&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>kubectl appy -n vmware-fn -f &lt;span class="k">function&lt;/span>.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then you can check the result with following commands:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>kn service list -n vmware-fn
&lt;span class="ln">2&lt;/span>
&lt;span class="ln">3&lt;/span>kn trigger list -n vmware-fn
&lt;span class="ln">4&lt;/span>
&lt;span class="ln">5&lt;/span>kubectl get pod -n vmware-fn
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>You will notice that there is multiple &lt;code>kn-vm-creation-attr-fn-trigger-xxxx&lt;/code> triggers deployed. It is due to the filtering applied to incoming event, to only get the one matching some specific actions results.&lt;/p>
&lt;/blockquote>
&lt;h3 id="test">Test&lt;/h3>
&lt;p>By looking at pod logs, you can see the actions resulting from the incoming events:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln"> 1&lt;/span>172.17.0.1 - - [04/May/2021 14:08:00] &amp;#34;POST / HTTP/1.1&amp;#34; 204 -
&lt;span class="ln"> 2&lt;/span>2021-05-04 14:08:00,230 INFO werkzeug Thread-3 : 172.17.0.1 - - [04/May/2021 14:08:00] &amp;#34;POST / HTTP/1.1&amp;#34; 204 -
&lt;span class="ln"> 3&lt;/span>2021-05-04 14:09:18,462 DEBUG handler Thread-4 : &amp;#34;***cloud event*** {&amp;#34;attributes&amp;#34;: {&amp;#34;specversion&amp;#34;: &amp;#34;1.0&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;42516969-218a-406f-9ccc-db387befc4bf&amp;#34;,
&lt;span class="ln"> 4&lt;/span>&amp;#34;source&amp;#34;: &amp;#34;https://vcsa.local/sdk&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;com.vmware.event.router/event&amp;#34;, &amp;#34;datacontenttype&amp;#34;: &amp;#34;application/json&amp;#34;, &amp;#34;subject&amp;#34;: &amp;#34;DrsVmPoweredOnEvent&amp;#34;, &amp;#34;time&amp;#34;: &amp;#34;2021-05-04T07:33:33.773581268Z&amp;#34;, &amp;#34;knativearrivaltime&amp;#34;: &amp;#34;2021-05-04T07:33:33.772937393Z&amp;#34;}, &amp;#34;data&amp;#34;: {&amp;#34;Key&amp;#34;: 992270, &amp;#34;ChainId&amp;#34;: 992267, &amp;#34;CreatedTime&amp;#34;: &amp;#34;2021-05-04T07:33:32.759Z&amp;#34;, &amp;#34;UserName&amp;#34;: &amp;#34;VSPHERE.LOCAL\\test-user&amp;#34;, &amp;#34;Datacenter&amp;#34;: {&amp;#34;Name&amp;#34;: &amp;#34;Datacenter&amp;#34;, &amp;#34;Datacenter&amp;#34;: {&amp;#34;Type&amp;#34;: &amp;#34;Datacenter&amp;#34;, &amp;#34;Value&amp;#34;: &amp;#34;datacenter-21&amp;#34;}}, &amp;#34;ComputeResource&amp;#34;: {&amp;#34;Name&amp;#34;: &amp;#34;Cluster01&amp;#34;, &amp;#34;ComputeResource&amp;#34;: {&amp;#34;Type&amp;#34;: &amp;#34;ClusterComputeResource&amp;#34;, &amp;#34;Value&amp;#34;: &amp;#34;domain-c84&amp;#34;}}, &amp;#34;Host&amp;#34;: {&amp;#34;Name&amp;#34;: &amp;#34;esxi1.local&amp;#34;, &amp;#34;Host&amp;#34;: {&amp;#34;Type&amp;#34;: &amp;#34;HostSystem&amp;#34;, &amp;#34;Value&amp;#34;: &amp;#34;host-34&amp;#34;}}, &amp;#34;Vm&amp;#34;: {&amp;#34;Name&amp;#34;: &amp;#34;TestVM&amp;#34;, &amp;#34;Vm&amp;#34;: {&amp;#34;Type&amp;#34;: &amp;#34;VirtualMachine&amp;#34;, &amp;#34;Value&amp;#34;: &amp;#34;vm-596&amp;#34;}}, &amp;#34;Ds&amp;#34;: null, &amp;#34;Net&amp;#34;: null, &amp;#34;Dvs&amp;#34;: null, &amp;#34;FullFormattedMessage&amp;#34;: &amp;#34;DRS powered On TestVM on esxi1.local in Datacenter&amp;#34;, &amp;#34;ChangeTag&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;Template&amp;#34;: false}
&lt;span class="ln"> 5&lt;/span>}
&lt;span class="ln"> 6&lt;/span>2021-05-04 14:09:18,464 DEBUG vcenter Thread-4 : Initializing vCenter connection...
&lt;span class="ln"> 7&lt;/span>2021-05-04 14:09:18,992 INFO vcenter Thread-4 : Connected to vCenter 10.6.29.7
&lt;span class="ln"> 8&lt;/span>2021-05-04 14:09:19,483 INFO handler Thread-4 : Apply attribute &amp;gt; event-last_poweredon
&lt;span class="ln"> 9&lt;/span>2021-05-04 14:09:19,774 DEBUG handler Thread-4 : End of event
&lt;span class="ln">10&lt;/span>172.17.0.1 - - [04/May/2021 14:09:19] &amp;#34;POST / HTTP/1.1&amp;#34; 204 -
&lt;span class="ln">11&lt;/span>2021-05-04 14:09:19,777 INFO werkzeug Thread-4 : 172.17.0.1 - - [04/May/2021 14:09:19] &amp;#34;POST / HTTP/1.1&amp;#34; 204 -
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="is-it-serverless">Is it serverless?&lt;/h2>
&lt;p>With a &lt;code>autoscaling.knative.dev/minScale: &amp;quot;0&amp;quot;&lt;/code> annotation setting (as provided by default in the above functions), have look at the pods list to see the result of an event:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>k get pods --watch -n vmware-fn
&lt;span class="ln"> 2&lt;/span>&lt;span class="c1"># Output&lt;/span>
&lt;span class="ln"> 3&lt;/span>kn-vm-creation-attr-fn-service-00002-deployment-848865fdd-xgvb9 0/2 Pending &lt;span class="m">0&lt;/span> 0s
&lt;span class="ln"> 4&lt;/span>kn-vm-creation-attr-fn-service-00002-deployment-848865fdd-xgvb9 0/2 ContainerCreating &lt;span class="m">0&lt;/span> 1s
&lt;span class="ln"> 5&lt;/span>kn-vm-creation-attr-fn-service-00002-deployment-848865fdd-xgvb9 1/2 Running &lt;span class="m">0&lt;/span> 5s
&lt;span class="ln"> 6&lt;/span>kn-vm-creation-attr-fn-service-00002-deployment-848865fdd-xgvb9 1/2 Running &lt;span class="m">0&lt;/span> 6s
&lt;span class="ln"> 7&lt;/span>kn-vm-creation-attr-fn-service-00002-deployment-848865fdd-xgvb9 2/2 Running &lt;span class="m">0&lt;/span> 7s
&lt;span class="ln"> 8&lt;/span>&lt;span class="c1"># And after about 60s without events:&lt;/span>
&lt;span class="ln"> 9&lt;/span>kn-vm-creation-attr-fn-service-00002-deployment-848865fdd-xgvb9 2/2 Terminating &lt;span class="m">0&lt;/span> 68s
&lt;span class="ln">10&lt;/span>kn-vm-creation-attr-fn-service-00002-deployment-848865fdd-xgvb9 1/2 Terminating &lt;span class="m">0&lt;/span> 71s
&lt;span class="ln">11&lt;/span>kn-vm-creation-attr-fn-service-00002-deployment-848865fdd-xgvb9 0/2 Terminating &lt;span class="m">0&lt;/span> 2m8s
&lt;/code>&lt;/pre>&lt;/div>&lt;p>As you can see, the function is acting as a serverless one: when needed, the appropriate number of pods is spawned, and when there is not incoming (and matching) event: no pods are kept on the cluster.&lt;/p>
&lt;p>You can easily change values of &lt;code>autoscaling.knative.dev/maxScale: &amp;quot;1&amp;quot;&lt;/code> and &lt;code>autoscaling.knative.dev/minScale: &amp;quot;0&amp;quot;&lt;/code> according to your needs: for example, with &lt;code>minScale: &amp;quot;1&amp;quot;&lt;/code>: at least one pod will always remain listening for events: This could improve the time to execute an action it there is no pod to spawn after an inactivity period.&lt;/p>
&lt;p>So, considering that the service provider is &lt;em>knative&lt;/em>, our functions are acting like serverless ones and the management component is in charge of scaling (up and down to 0), the components running our application code, according to the incoming requests: This enable all the benefits of serverless applications and of-course, its drawbacks.&lt;/p>
&lt;h2 id="credits">Credits&lt;/h2>
&lt;p>Title photo by &lt;a href="https://unsplash.com/@jstrippa">James Harrison&lt;/a> on &lt;a href="https://unsplash.com/photos/vpOeXr5wmR4">Unsplash&lt;/a>&lt;/p></description></item><item><title>VMware Event Broker on Kubernetes with Knative functions - part 1</title><link>vuptime.io/post/2021-05-05-vmware-event-broker-on-k8s-with-knative-part1/</link><pubDate>Wed, 05 May 2021 00:00:00 +0000</pubDate><guid>/2021/05/05/vmware-event-broker-on-k8s-with-knative-part1/</guid><description>
&lt;p>As mentioned in some previous posts (&lt;a href="https://vuptime.io/2020/11/02/vmware-event-broker-on-k8s-first-steps/">here&lt;/a> or &lt;a href="https://vuptime.io/2020/12/17/vmware-event-broker-0.5.0-on-k8s-first-steps/">here&lt;/a>), I do not deploy the instance-based packaging of the &lt;a href="https://vmweventbroker.io/">VMware Event Router&lt;/a>: aka VEBA. I prefer to reuse existing Kubernetes cluster(s) to host the &lt;code>vmware event router&lt;/code> and the associated functions.&lt;/p>
&lt;p>Currently, most of my automation work relies on &lt;a href="https://www.openfaas.com/">OpenFaaS®&lt;/a> functions, and &lt;a href="https://argoproj.github.io/">Argo workflows&lt;/a> for long running tasks (triggered by OpenFaaS).&lt;/p>
&lt;p>Since &lt;a href="https://github.com/vmware-samples/vcenter-event-broker-appliance/releases/tag/v0.5.0">v0.5.0 release&lt;/a>, the VMware Event Broker, supports a new processor: &lt;code>knative&lt;/code>.&lt;/p>
&lt;p>This &lt;strong>part 1&lt;/strong> post will cover the deployment of Knative components, in order to prepare the deployment of VMware Event Broker through &lt;code>helm&lt;/code> chart mentioned in &lt;a href="vuptime.io/2021/05/06/vmware-event-broker-on-k8s-with-knative-part2">&lt;strong>part2&lt;/strong>&lt;/a>.&lt;/p>
&lt;h1 id="about-knative">About Knative&lt;/h1>
&lt;p>&lt;a href="https://knative.dev">&lt;strong>Knative&lt;/strong>&lt;/a> is a Google-held Kubernetes-based platform to build, deploy, and manage modern serverless workloads. The project is made of three major components:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://knative.dev/docs/serving/">Knative Serving&lt;/a>: Easily manage stateless services on Kubernetes by reducing the developer effort required for auto-scaling, networking, and rollouts.&lt;/li>
&lt;li>&lt;a href="https://knative.dev/docs/eventing/">Knative Eventing&lt;/a>: Easily route events between on-cluster and off-cluster components by exposing event routing as configuration rather than embedded in code.&lt;/li>
&lt;/ul>
&lt;p>Some major &lt;em>serverless&lt;/em>* cloud services are now based or compatible with knative API like &lt;a href="https://www.openshift.com/learn/topics/serverless">Red Hat OpenShift Serverless&lt;/a> or &lt;a href="https://cloud.google.com/run">Google Cloud Run&lt;/a>.&lt;/p>
&lt;p>The &lt;strong>Knative Eventing&lt;/strong> provide an abstraction of the messaging layer supporting multiple and pluggable event sources. Multiple delivery modes are also supported (fanout, direct) and enable a variety of usages. Here is an overview of events way within the Eventing component:&lt;/p>
&lt;figure>&lt;img src="vuptime.io/images/veba-first-steps/kn-broker-trigger-overview.svg"/>&lt;figcaption>
&lt;h4>Broker Trigger Diagram (src: https://knative.dev/docs/eventing/)&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;p>The &lt;strong>Knative Serving&lt;/strong> project provides middleware primitives that enable the deployment of serverless containers with automatic scaling (up and down to zero). The component is in charge of traffic routing to deployed application and to manage versioning, rollbacks, load-testing etc.&lt;/p>
&lt;figure>&lt;img src="vuptime.io/images/veba-first-steps/kn-object_model.png"/>&lt;figcaption>
&lt;h4>Knative service overview (src: https://knative.dev/docs/serving/)&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;h2 id="deploy-knative-on-your-cluster">Deploy Knative on your cluster&lt;/h2>
&lt;h3 id="setup-description">Setup description&lt;/h3>
&lt;p>In the following setup, we will deploy &lt;strong>Serving&lt;/strong> and &lt;strong>Eventing&lt;/strong> components with &lt;a href="https://github.com/knative-sandbox/net-kourier">Kourier&lt;/a> as Ingress for Knative Serving.&lt;/p>
&lt;blockquote>
&lt;p>Kourier is a lightweight alternative for the Istio ingress as its deployment consists only of an Envoy proxy and a control plane for it.&lt;/p>
&lt;/blockquote>
&lt;p>I assume that you already have a working Kubernetes cluster.&lt;/p>
&lt;blockquote>
&lt;p>If not, you can try &lt;a href="https://kind.sigs.k8s.io/docs/user/quick-start/">&lt;code>kind&lt;/code>&lt;/a> to deploy a local, dev-purpose, cluster.&lt;/p>
&lt;/blockquote>
&lt;p>The following process also relies on &lt;code>helm&lt;/code> to deploy the vmware event router.&lt;/p>
&lt;p>We will use the (current) latest version of knative, but you can probably change the value of the following setting according to the &lt;a href="https://github.com/knative/operator/releases">knative latest available release&lt;/a>.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="nb">export&lt;/span> &lt;span class="nv">KN_VERSION&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;v0.22.0&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="knative-serving">Knative Serving&lt;/h3>
&lt;p>&lt;a href="https://knative.dev/docs/install/install-serving-with-yaml/">Knative documentation&lt;/a> is really helpful for the following steps. I will only put together the commands I used in my setup:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="c1"># custom resources definitions&lt;/span>
&lt;span class="ln">2&lt;/span>kubectl apply -f https://github.com/knative/serving/releases/download/&lt;span class="si">${&lt;/span>&lt;span class="nv">KN_VERSION&lt;/span>&lt;span class="si">}&lt;/span>/serving-crds.yaml
&lt;span class="ln">3&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="c1"># Knative Serving core components&lt;/span>
&lt;span class="ln">5&lt;/span>kubectl apply -f https://github.com/knative/serving/releases/download/&lt;span class="si">${&lt;/span>&lt;span class="nv">KN_VERSION&lt;/span>&lt;span class="si">}&lt;/span>/serving-core.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>A new &lt;code>knative-serving&lt;/code> namespace will be deployed on the cluster with some core resources.&lt;/p>
&lt;p>Then we install and configure Kourier to act as our Ingress controller:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="c1"># Install and configure Kourier&lt;/span>
&lt;span class="ln">2&lt;/span>kubectl apply -f https://raw.githubusercontent.com/knative/serving/&lt;span class="si">${&lt;/span>&lt;span class="nv">KN_VERSION&lt;/span>&lt;span class="si">}&lt;/span>/third_party/kourier-latest/kourier.yaml
&lt;span class="ln">3&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="c1"># Specfiy knative Serving to use Kourier&lt;/span>
&lt;span class="ln">5&lt;/span>kubectl patch configmap/config-network --namespace knative-serving --type merge --patch &lt;span class="s1">&amp;#39;{&amp;#34;data&amp;#34;:{&amp;#34;ingress.class&amp;#34;:&amp;#34;kourier.ingress.networking.knative.dev&amp;#34;}}&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Depending on the target platform you use, you may, or may not have a value already set for the &lt;code>External-IP&lt;/code> of the &lt;code>kourier&lt;/code> service.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>kubectl -n kourier-system get service kourier
&lt;span class="ln">2&lt;/span>&lt;span class="c1"># Output&lt;/span>
&lt;span class="ln">3&lt;/span>NAME TYPE CLUSTER-IP EXTERNAL-IP PORT&lt;span class="o">(&lt;/span>S&lt;span class="o">)&lt;/span> AGE
&lt;span class="ln">4&lt;/span>kourier LoadBalancer 10.43.165.137 pending 80:30471/TCP,443:32405/TCP 10m
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you have a pending value (like in my on-premise setup), you can manually assign an IP address to the service:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>kubectl patch service kourier -p &lt;span class="s1">&amp;#39;{&amp;#34;spec&amp;#34;: {&amp;#34;type&amp;#34;: &amp;#34;LoadBalancer&amp;#34;, &amp;#34;externalIPs&amp;#34;:[&amp;#34;192.168.1.36&amp;#34;]}}&amp;#39;&lt;/span> -n kourier-system
&lt;span class="ln">2&lt;/span>
&lt;span class="ln">3&lt;/span>kubectl -n kourier-system get service kourier
&lt;span class="ln">4&lt;/span>&lt;span class="c1"># Output&lt;/span>
&lt;span class="ln">5&lt;/span>NAME TYPE CLUSTER-IP EXTERNAL-IP PORT&lt;span class="o">(&lt;/span>S&lt;span class="o">)&lt;/span> AGE
&lt;span class="ln">6&lt;/span>kourier LoadBalancer 10.43.165.137 192.168.1.36 80:30471/TCP,443:32405/TCP 10m
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can have a quick look at running pods on your `` namespace to see if everything is running fine:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>kubectl get pods -n knative-serving
&lt;span class="ln">2&lt;/span>&lt;span class="c1"># Output&lt;/span>
&lt;span class="ln">3&lt;/span>NAME READY STATUS RESTARTS AGE
&lt;span class="ln">4&lt;/span>3scale-kourier-control-67c86f4f69-6mnwr 1/1 Running &lt;span class="m">0&lt;/span> 11m
&lt;span class="ln">5&lt;/span>activator-799bbf59dc-s6vls 1/1 Running &lt;span class="m">0&lt;/span> 11m
&lt;span class="ln">6&lt;/span>autoscaler-75895c6c95-mbnqw 1/1 Running &lt;span class="m">0&lt;/span> 11m
&lt;span class="ln">7&lt;/span>controller-57956677cf-74hp9 1/1 Running &lt;span class="m">0&lt;/span> 11m
&lt;span class="ln">8&lt;/span>webhook-ff79fddb7-gjvwq 1/1 Running &lt;span class="m">0&lt;/span> 11m
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="knative-eventing">Knative Eventing&lt;/h3>
&lt;p>As for the Serving component, you can rely on a very clear &lt;a href="https://knative.dev/docs/install/install-eventing-with-yaml/">documentation to install the Eventing component&lt;/a>.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1"># custom resources definitions&lt;/span>
&lt;span class="ln"> 2&lt;/span>kubectl apply -f https://github.com/knative/eventing/releases/download/&lt;span class="si">${&lt;/span>&lt;span class="nv">KN_VERSION&lt;/span>&lt;span class="si">}&lt;/span>/eventing-crds.yaml
&lt;span class="ln"> 3&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="c1"># Knative Eventing core components&lt;/span>
&lt;span class="ln"> 5&lt;/span>kubectl apply -f https://github.com/knative/eventing/releases/download/&lt;span class="si">${&lt;/span>&lt;span class="nv">KN_VERSION&lt;/span>&lt;span class="si">}&lt;/span>/eventing-core.yaml
&lt;span class="ln"> 6&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="c1"># Prepare In-memory channel (messaging) layer&lt;/span>
&lt;span class="ln"> 8&lt;/span>kubectl apply -f https://github.com/knative/eventing/releases/download/&lt;span class="si">${&lt;/span>&lt;span class="nv">KN_VERSION&lt;/span>&lt;span class="si">}&lt;/span>/in-memory-channel.yaml
&lt;span class="ln"> 9&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="c1"># Prepare MT-channel based broker&lt;/span>
&lt;span class="ln">11&lt;/span>kubectl apply -f https://github.com/knative/eventing/releases/download/v0.22.0/mt-channel-broker.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;strong>Channels&lt;/strong> are Kubernetes custom resources that define a single event forwarding and persistence layer. &lt;a href="https://knative.dev/docs/eventing/channels/">[More details]&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>&lt;strong>Brokers&lt;/strong> can be used in combination with subscriptions and triggers to deliver events from an event source to an event sink.&lt;/p>
&lt;/blockquote>
&lt;p>Here, the default &lt;em>MT Channel Based Broker&lt;/em> relies on a default, unsuitable for production, &lt;em>In-Memory&lt;/em> channel.&lt;/p>
&lt;p>We will only use the &lt;em>clusterDefault&lt;/em> settings but, if needed, you can edit the broker configuration by using the next command:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>kubectl edit cm -n knative-eventing config-br-defaults
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="knative-cli">knative CLI&lt;/h3>
&lt;p>Event if &lt;code>kubectl&lt;/code> could be used to manage knative components, a &lt;code>kn&lt;/code> CLI tool is also available with completion of otherwise complex procedures such as auto-scaling and traffic splitting.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>curl https://github.com/knative/client/releases/download/&lt;span class="si">${&lt;/span>&lt;span class="nv">KN_VERSION&lt;/span>&lt;span class="si">}&lt;/span>/kn-linux-amd64 -L &amp;gt; kn
&lt;span class="ln">2&lt;/span>chmod +x kn
&lt;span class="ln">3&lt;/span>sudo mv kn /usr/local/bin/kn
&lt;span class="ln">4&lt;/span>&lt;span class="c1"># Test it&lt;/span>
&lt;span class="ln">5&lt;/span>kn version
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="part-2-deploy-vmware-event-broker">Part 2: Deploy VMware Event Broker&lt;/h1>
&lt;p>See you in &lt;a href="vuptime.io/2021/05/06/vmware-event-broker-on-k8s-with-knative-part2">&lt;strong>Part 2&lt;/strong>&lt;/a> to deploy the VMware Event Broker and some functions.&lt;/p>
&lt;h2 id="credits">Credits&lt;/h2>
&lt;p>Title photo by &lt;a href="https://unsplash.com/@jupp">Jonathan Kemper&lt;/a> on &lt;a href="https://unsplash.com/photos/H488ymQgIgM">Unsplash&lt;/a>&lt;/p></description></item></channel></rss>